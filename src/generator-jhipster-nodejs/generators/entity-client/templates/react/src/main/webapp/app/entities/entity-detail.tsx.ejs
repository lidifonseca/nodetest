<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>


<%_ function printFields(field){ _%>

  <%_  const viewLayoutLabel = field.viewLayoutLabel ? field.viewLayoutLabel : 'left' ; _%>
  <%_  const viewLayoutSize = field.viewLayoutSize ? field.viewLayoutSize : 12; _%>
  <%_  const fieldType = field.fieldType; _%>
  <%_  const fieldName = field.fieldName; _%>
  <%_  const fieldNameHumanized = field.fieldNameHumanized; _%>

  <Col md="<%= viewLayoutSize %>">
    <Row>
      <Col md="<%= viewLayoutLabel == 'top' ? 12 : 3  %>">
        <dt>
          <span id="<%= fieldName %>">
            <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
              <%= fieldNameHumanized %>
            </Translate>
          </span>
          <%_ if (field.javadoc) { _%>
          <UncontrolledTooltip target="<%= fieldName %>">
            <%_ if (enableTranslation) { _%>
            <Translate contentKey="<%= i18nKeyPrefix %>.help.<%= fieldName %>"/>
            <%_ } else { _%>
            <%= field.javadoc %>
            <%_ } _%>
          </UncontrolledTooltip>
          <%_ } _%>
        </dt>
      </Col>
      <Col md="<%= viewLayoutLabel == 'top' ? 12 : 9  %>">
        <dd>
        <%_ if (fieldType === 'Boolean') { _%>
          {<%= entityInstance %>Entity.<%=fieldName%> ? 'true' : 'false'}
        <%_ } else if (fieldType === 'Instant' || fieldType === 'ZonedDateTime') { _%>
          <TextFormat value={<%= entityInstance %>Entity.<%=fieldName%>} type="date" format={APP_DATE_FORMAT} />
        <%_ } else if (fieldType === 'LocalDate') { _%>
          <TextFormat value={<%= entityInstance %>Entity.<%=fieldName%>} type="date" format={APP_LOCAL_DATE_FORMAT} />
        <%_
            } else if (['byte[]', 'ByteBuffer'].includes(fieldType)) {
              const fieldBlobType = field.fieldTypeBlobContent;
              if (fieldBlobType !== 'text') {
        _%>
            {<%= entityInstance %>Entity.<%=fieldName%> ? (
              <div>
                <a rel="noopener noreferrer" target={"_blank"} href={`${<%= entityInstance %>Entity.<%= fieldName %>}`}>
                <%_ if (fieldBlobType === 'image') { _%>
                  <img src={`${<%= entityInstance %>Entity.<%= fieldName %>}`} style={{ maxHeight: '30px' }} />
                <%_ } else { _%>
                  <Translate contentKey="entity.action.open">Open</Translate>&nbsp;
                <%_ } _%>
                </a>
                <a rel="noopener noreferrer" target={"_blank"} href={`${<%= entityInstance %>Entity.<%= fieldName %>}`}>
                  { (<%= entityInstance %>Entity.<%= fieldName %>ContentType.indexOf("image/") !== -1) ? 
                    <img src={`${<%= entityInstance %>Entity.<%= fieldName %>}`} style={{ maxHeight: '30px' }} />
                    :
                    <Translate contentKey="entity.action.open">Open</Translate>
                  } 
                </a>
              </div>
            ) : null}
          <%_ } else { _%>
            {<%= entityInstance %>Entity.<%= field.fieldName %>}
          <%_ } _%>
        <%_ } else { _%>
        {<%= entityInstance %>Entity.<%= field.fieldName %>}
        <%_ } _%>
        </dd>
      </Col>
    </Row>
  </Col>

<%_ } _%>



<%_ function printRelationships(rel){ _%>
  <%_ const viewLayoutLabel = rel.viewLayoutLabel ? rel.viewLayoutLabel : 'left' ; _%>
  <%_ const viewLayoutSize = rel.viewLayoutSize ? rel.viewLayoutSize : 12; _%>
  <%_ const relationshipType = rel.relationshipType;
  const ownerSide = rel.ownerSide;
  const relationshipName = rel.relationshipName;
  const relationshipFieldName = rel.relationshipFieldName;
  const relationshipFieldNamePlural = rel.relationshipFieldNamePlural;
  const relationshipNameHumanized = rel.relationshipNameHumanized;
  const otherEntityName = rel.otherEntityName;
  const otherEntityStateName = rel.otherEntityStateName;
  const otherEntityField = rel.otherEntityField;
  if (relationshipType === 'many-to-one'
  || (relationshipType === 'one-to-one' && ownerSide === true)
  || (relationshipType === 'many-to-many' && ownerSide === true)) { _%>

      <Col md="<%= viewLayoutSize %>">
        <Row>
          <Col md="<%= viewLayoutLabel == 'top' ? 12 : 3  %>">
            <dt>
            <Translate contentKey="<%= i18nKeyPrefix %>.<%= relationshipName %>">
              <%= relationshipNameHumanized %>
            </Translate>
            </dt>
          </Col>
          <Col md="<%= viewLayoutLabel == 'top' ? 12 : 9  %>">
            <dd>
              <%_ if (otherEntityName === 'user') { _%>
                  <%_ if (relationshipType === 'many-to-many') { _%>
            {
            (<%= entityInstance %>Entity.<%= relationshipFieldNamePlural %>) ?
            (<%= entityInstance %>Entity.<%= relationshipFieldNamePlural %>.map((val, i) =>
            <span key={val.id}><a>{val.<%= otherEntityField %>}</a>{(i === <%= entityInstance %>Entity.<%= relationshipFieldNamePlural %>.length - 1) ? '' : ', '}</span>
            )
            ) : null
            }                  <%_ } else { _%>
                      <%_ if (dto === 'no') { _%>
              {(<%= entityInstance + "Entity." + relationshipFieldName %>) ? <%= entityInstance + "Entity." + relationshipFieldName + "." + otherEntityField %> : ''}
                          <%_ } else { _%>
              {<%= entityInstance + "Entity." + relationshipFieldName %> ? <%= entityInstance + "Entity." + relationshipFieldName + ".id" %> : ''}
                      <%_ } _%>
                  <%_ } _%>
              <%_ } else { _%>
                  <%_ if (relationshipType === 'many-to-many') { _%>
            {
            (<%= entityInstance %>Entity.<%= relationshipFieldNamePlural %>) ?
            (<%= entityInstance %>Entity.<%= relationshipFieldNamePlural %>.map((val, i) =>
              <span key={val.id}><a>{val.<%= otherEntityField %>}</a>{(i === <%= entityInstance %>Entity.<%= relationshipFieldNamePlural %>.length - 1) ? '' : ', '}</span>
            )
            ) : null
            }
                  <%_ } else { _%>
                      <%_ if (dto === 'no') { _%>
              {(<%= entityInstance + "Entity." + relationshipFieldName %>) ? <%= entityInstance + "Entity." + relationshipFieldName + "." + otherEntityField %> : ''}
                      <%_ } else { _%>
              {<%= entityInstance + "Entity." + relationshipFieldName %> ? <%= entityInstance + "Entity." + relationshipFieldName + ".id" %> : ''}
                      <%_ } _%>
                  <%_ } _%>
              <%_ } _%>
            </dd>
          </Col>
        </Row>
      </Col>
        
    <%_ } _%>

<%_ } _%>

import React from 'react';
import { connect } from 'react-redux';
import { Link, RouteComponentProps } from 'react-router-dom';
import { Button, <% if (haveFieldWithJavadoc) { %>UncontrolledTooltip, <% } %>Row, Col } from 'reactstrap';
import {Panel, PanelHeader, PanelBody, PanelFooter} from 'app/shared/layout/panel/panel.tsx';
import {
  Translate,
  ICrudGetAction,
  <%_ if (fieldsContainBlob) { _%>
    <%_ if (fieldsContainBlobOrImage) { _%>
  openFile,
    <%_ } _%>
  <%_ } _%>
  <%_ if (fieldsContainDate) { _%>
  TextFormat
  <%_ } _%>
} from 'react-jhipster';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

import { IRootState } from 'app/shared/reducers';
import { getEntity, I<%= entityReactName %>BaseState, get<%= entityReactName %>State } from './<%= entityFileName %>.reducer';
import { I<%= entityReactName %> } from 'app/shared/model/<%= entityModelFileName %>.model';
import { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from 'app/config/constants';


<%_ if (viewTabs.length > 0) { _%>
  import { TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap';
  import classnames from 'classnames';
<%_ } _%>
  
export interface I<%= entityReactName %>State {
  fieldsBase: I<%= entityReactName %>BaseState;
}

export interface I<%= entityReactName %>DetailProps extends StateProps, DispatchProps, RouteComponentProps<{id: string}>  {
  <%_ if (viewTabs.length > 0) { _%>activeTab: number;<%_ } _%>
}

export class <%= entityReactName %>Detail extends React.Component<I<%= entityReactName %>DetailProps, I<%= entityReactName %>State> {

  constructor(props: Readonly<I<%= entityReactName %>DetailProps>) {
    super(props);
    this.state = {
      ...this.state,
      fieldsBase: get<%= entityReactName %>State(this.props.location),
      <%_ if (viewTabs.length > 0) { _%>activeTab: 0,<%_ } _%>
    };
  }

  <%_ if (viewTabs.length > 0) { _%>
    toggleTab(tab: number) {
      if (this.state.activeTab !== tab) {
        this.setState({
          activeTab: tab
        });
      }
    }
  <%_ } _%>

  componentDidMount() {
    this.props.getEntity(this.props.match.params.id);
  }

  render() {
    const { <%= entityInstance %>Entity } = this.props;
    return (
      <div>
        <ol className="breadcrumb float-xl-right">
          <li className="breadcrumb-item"><Link to="/">Inicio</Link></li>
          <li className="breadcrumb-item active"><%= entityClassPluralHumanized %></li>
          <li className="breadcrumb-item active"><%= entityClassPluralHumanized %> details</li>
        </ol>
        <h1 className="page-header">&nbsp;&nbsp;</h1>
        <Panel>
          <PanelHeader>
            <h2 id="page-heading">
              <span className="page-header ml-3"><%= entityClassPluralHumanized %></span>
              <%_ console.info(viewButtons) _%>
              <%_ for (idx in viewButtons) { _%>
                <%_ const attrib = viewButtons[idx].attributes; _%>
                  <Button className="float-right jh-create-entity" tag={<%=attrib['tag'] %>} to={<%=attrib['to'] %>} color="<%=attrib['color'] %>" size="<%=attrib['size'] %>">
                    <FontAwesomeIcon icon="<%=attrib['icon'] %>" /> <span className="d-none d-md-inline"><Translate contentKey="entity.action.<%=viewButtons[idx].name %>"><%=attrib['text'] %></Translate></span>
                  </Button>
              <%_ } _%>
            </h2>
          </PanelHeader>
          <PanelBody>
            <Row>
              <Col md="8">
                <h2>
                  <Translate contentKey="<%= i18nKeyPrefix %>.detail.title"><%= entityClass %></Translate> 
                  <%_ if (toStringFields.length > 0) { _%>
                    <small>
                      <%_ for (idx in toStringFields) { _%>
                        <%_ if(toStringFields[idx].type == 'field'){ _%>
                          &nbsp; {<%= entityInstance %>Entity['<%= toStringFields[idx].entity.fieldName %>']}
                          <%_  } else { _%>
                          &nbsp; {<%= entityInstance %>Entity['<%= toStringFields[idx].entity.relationshipName %>']} 
                          <%_ } _%>
                      <%_ } _%>
                    </small>
                  <%_ } else { _%>
                    [<b>{<%= entityInstance %>Entity.id}</b>]
                  <%_ } _%>

                </h2>

                  <Row className="jh-entity-details">
                    <%_ if (viewTabs.length === 0) { _%>
                      <%_ if (viewLayout.length > 0) {  _%>
                        <%_ for (idx in viewLayout) { 
                            if(viewLayout[idx].type == 'field'){
                              printFields(viewLayout[idx].entity);
                            } else {
                              printRelationships(viewLayout[idx].entity);
                            }
                        } _%>
                    <%_ } else { _%>
                        <%_ for (idx in fields) { 
                              printFields(fields[idx]);
                            } _%>
                        <%_ for (idx in relationships) { 
                              printRelationships(relationships[idx]);
                        } _%>
                    <%_ } _%>
                    <%_ } else { _%>
                       <Nav tabs>
                        <%_ for (idx in viewTabs) { _%>
                          <NavItem>
                            <NavLink
                              className={classnames({ active: this.state.activeTab === <%= idx %> })}
                              onClick={() => { this.toggleTab(<%= idx %>); }}
                            >
                              <span className="d-sm-none"> <%= viewTabs[idx] %></span>
                              <span className="d-sm-block d-none"><%= viewTabs[idx] %></span>
                            </NavLink>
                          </NavItem>
                        <%_ } _%>
                        <%_ if(defaultViewTab) { _%>
                            <NavItem>
                              <NavLink
                                className={classnames({ active: this.state.activeTab === <%= viewTabs.length %> })}
                                onClick={() => { this.toggleTab(<%= viewTabs.length %>); }}
                              >
                                <span className="d-sm-none">Default</span>
                                <span className="d-sm-block d-none">Default</span>
                              </NavLink>
                            </NavItem>
                        <%_ } _%>
                      </Nav> 
                      <TabContent activeTab={this.state.activeTab}>
                        <%_ for (iTabs in viewTabs) { _%>
                          <TabPane tabId={<%= iTabs %>}>
                            <%_ if (viewLayout.length > 0) {  _%>
                              <%_ for (idx in viewLayout) { 
                                if(viewTabs[iTabs] === viewLayout[idx].entity['viewTab']) { 
                                  if(viewLayout[idx].type == 'field'){
                                    printFields(viewLayout[idx].entity);
                                  } else {
                                    printRelationships(viewLayout[idx].entity);
                                  }
                                } 
                              } _%>
                        <%_ } else { _%>
                              <%_ for (idx in fields) { 
                                    if(viewTabs[iTabs] === fields[idx]['viewTab']) { 
                                      printFields(fields[idx]);
                                    } 
                                  } _%>
                                  <%_ for (idx in relationships) {
                                    if(viewTabs[iTabs] === relationships[idx]['viewTab']) { 
                                      printRelationships(relationships[idx]);
                                  }
                                } _%>
                        <%_ } _%>
                          </TabPane>
                        <%_ } _%>
                          <%_ if(defaultViewTab) { _%>
                            <TabPane tabId={<%= viewTabs.length %>}>
                              <%_ if (viewLayout.length > 0) {  _%>
                                <%_ for (idx in viewLayout) { 
                                  if(!viewLayout[idx].entity['viewTab'] || viewLayout[idx].entity['viewTab'] === "default") { 
                                    if(viewLayout[idx].type == 'field'){
                                      printFields(viewLayout[idx].entity);
                                    } else {
                                      printRelationships(viewLayout[idx].entity);
                                    }
                                  } 
                                } _%>
                        <%_ } else { _%>
                                <%_ for (idx in fields) { 
                                  if(!fields[idx]['viewTab'] || fields[idx]['viewTab'] === "default") { 
                                    printFields(fields[idx]);
                                  } 
                                } _%>
                                <%_ for (idx in relationships) {
                                  if(!relationships[idx]['viewTab'] || relationships[idx]['viewTab'] === "default") { 
                                    printRelationships(relationships[idx]);
                                  }
                                } _%>
                        <%_ } _%>
                            </TabPane>
                        <%_ } _%>
                        
                      </TabContent>
                    <%_ } _%>
                    </Row>

                <Button tag={Link} to="/<%= entityFileName %>" replace color="info">
                  <FontAwesomeIcon icon="arrow-left" /> <span className="d-none d-md-inline" ><Translate contentKey="entity.action.back">Back</Translate></span>
                </Button>&nbsp;
                <%_ if (!readOnly) { _%>
                <Button tag={Link} to={`/<%= entityFileName %>/${<%=entityInstance %>Entity.id}/edit`} replace color="primary">
                  <FontAwesomeIcon icon="pencil-alt" /> <span className="d-none d-md-inline"><Translate contentKey="entity.action.edit">Edit</Translate></span>
                </Button>
                <%_ } _%>
              </Col>
            </Row>
          </PanelBody>
          </Panel>
        </div>
      );
  }
}

const mapStateToProps = ({ <%= entityInstance %> }: IRootState) => ({
    <%= entityInstance %>Entity: <%= entityInstance %>.entity
});

const mapDispatchToProps = { getEntity };

type StateProps = ReturnType<typeof mapStateToProps>;
type DispatchProps = typeof mapDispatchToProps;

export default connect(mapStateToProps, mapDispatchToProps)(<%= entityReactName %>Detail);
