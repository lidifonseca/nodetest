<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>


/* eslint-disable require-await */
<%_ function printFieldsTable(field){ _%>

  <%_ const fieldType = field.fieldType; _%>
  <%_ const fieldName = field.fieldName; _%>
  <%_ const fieldIsEnum = field.fieldIsEnum; _%>
  <td>
    <%_ if (fieldType === 'Boolean') { _%>
      {<%= entityInstance %>.<%=field.fieldName%> ? 'true' : 'false'}
    <%_ } else if (fieldType === 'Instant' || fieldType === 'ZonedDateTime') { _%>
      <TextFormat type="date" value={<%= entityInstance %>.<%=fieldName%>} format={APP_DATE_FORMAT} />
    <%_ } else if (fieldType === 'LocalDate') { _%>
      <TextFormat type="date" value={<%= entityInstance %>.<%=fieldName%>} format={APP_LOCAL_DATE_FORMAT} />
    <%_ } else if (fieldIsEnum && enableTranslation) { _%>
      <Translate contentKey={`<%= angularAppName %>.<%= fieldType %>.${<%= entityInstance %>.<%= fieldName %>}`} />
    <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType)) { _%>
      <%_
        // blobFields
        const fieldBlobType = field.fieldTypeBlobContent;
        if (fieldBlobType !== 'text') {
      _%>
        {<%= entityInstance %>.<%= fieldName %> ? (
          <div>
              <a onClick={openFile(<%= entityInstance %>.<%= fieldName %>ContentType, <%= entityInstance %>.<%= fieldName %>)}>
              <%_ if (fieldBlobType === 'image') { _%>
                <img src={`data:${<%= entityInstance %>.<%= fieldName %>ContentType};base64,${<%= entityInstance %>.<%= fieldName %>}`} style={{ maxHeight: '30px' }} />
              <%_ } else { _%>
                <Translate contentKey="entity.action.open">Open</Translate>
              <%_ } _%>
              &nbsp;
            </a>
            <span>{<%= entityInstance %>.<%= fieldName %>ContentType}, {byteSize(<%= entityInstance %>.<%= fieldName %>)}</span>
          </div>
        ) : null}
      <%_ } else { _%>
          {<%= entityInstance %>.<%= fieldName %>}
      <%_ } _%>
    <%_ } else { _%>
      {<%= entityInstance %>.<%= fieldName %>}
    <%_ } _%>
  </td>
<%_ } _%>


<%_ function printRelationshipsTable(rel) { _%>
  <%_ const relationshipType = rel.relationshipType; _%>
  <%_ const ownerSide = rel.ownerSide; _%>
  <%_ const relationshipFieldName = rel.relationshipFieldName; _%>
  <%_ const relationshipFieldNamePlural = rel.relationshipFieldNamePlural; _%>
  <%_ const otherEntityName = rel.otherEntityName; _%>
  <%_ const otherEntityStateName = rel.otherEntityStateName; _%>
  <%_ const otherEntityField = rel.otherEntityField; _%>
  <%_ const otherEntityFieldCapitalized = rel.otherEntityFieldCapitalized; _%>
    <%_ if (relationshipType === 'many-to-one'
    || (relationshipType === 'one-to-one' && ownerSide === true)
    || (relationshipType === 'many-to-many' && ownerSide === true && pagination === 'no')) { _%>
  <td>
    <%_ if (otherEntityName === 'user') { _%>
      <%_ if (relationshipType === 'many-to-many') { _%>
          {
            (<%= entityInstance %>.<%= relationshipFieldNamePlural %>) ?
                (<%= entityInstance %>.<%= relationshipFieldNamePlural %>.map((val, j) =>
                    <span key={j}>{val.<%= otherEntityField %>}{(j === <%= entityInstance %>.<%= relationshipFieldNamePlural %>.length - 1) ? '' : ', '}</span>
                )
            ) : null
          }
      <%_ } else { _%>
            <%_ if (dto === 'no') { _%>
            {<%= entityInstance + "." + relationshipFieldName %> ? <%= entityInstance + "." + relationshipFieldName + "." + otherEntityField %> : ''}
                <%_ } else { _%>
            {<%= entityInstance + "." + relationshipFieldName + otherEntityFieldCapitalized %> ? <%= entityInstance + "." + relationshipFieldName + otherEntityFieldCapitalized %> : ''}
              <%_ } _%>
      <%_ } _%>
    <%_ } else { _%>
        <%_ if (relationshipType === 'many-to-many') { _%>
            {
              (<%= entityInstance %>.<%= relationshipFieldNamePlural %>) ?
                  (<%= entityInstance %>.<%= relationshipFieldNamePlural %>.map((val, j) =>
                      <span key={j}><Link to={`<%= otherEntityStateName %>/${val.id}`}>{val.<%= otherEntityField %>}</Link>{(j === <%= entityInstance %>.<%= relationshipFieldNamePlural %>.length - 1) ? '' : ', '}</span>
                  )
              ) : null
            }
      <%_ } else { _%>
            <%_ if (dto === 'no') { _%>
      {<%= entityInstance + "." + relationshipFieldName %> ?
      <Link to={`<%= otherEntityStateName %>/${<%= entityInstance + "." + relationshipFieldName + ".id}" %>`}>
        {<%= entityInstance + "." + relationshipFieldName + "." + otherEntityField %>}
      </Link> : ''}
            <%_ } else { _%>
      {<%= entityInstance + "." + relationshipFieldName %> ?
      <Link to={`<%= otherEntityStateName %>/${<%= entityInstance + "." + relationshipFieldName + ".id}" %>`}>
        {<%= entityInstance + "." + relationshipFieldName + ".id" %>}
      </Link> : ''}
            <%_ } _%>
        <%_ } _%>
      <%_ } _%>
    </td>
    <%_ } _%>
<%_ } _%>

/* eslint complexity: ["error", 100] */
import React from 'react';
<%_ if (pagination === 'infinite-scroll')Â { _%>
import InfiniteScroll from 'react-infinite-scroller';
<%_ } _%>
import { convertDateTimeFromServer, convertDateTimeToServer } from 'app/shared/util/date-utils';
import { connect } from 'react-redux';
import { CSVDownload } from 'react-csv';
import { Link, RouteComponentProps } from 'react-router-dom';
import { Button, <% if (searchEngine === 'elasticsearch') { %>InputGroup, <% } %>Col, Row, Table, Label, UncontrolledTooltip, UncontrolledCollapse, CardHeader, CardBody,
<%_  if (listButtonsInDropdown === true) { _%> Dropdown, DropdownToggle,  DropdownMenu,  DropdownItem, <%_ } _%> Modal, ModalHeader, ModalBody, ModalFooter, UncontrolledAlert } from 'reactstrap';
import { AvForm, div, AvInput } from 'availity-reactstrap-validation';
import {
  <%_ if (blobFields.length > 0) { _%>
    <%_ if (fieldsContainBlobOrImage) { _%>
  openFile,
    <%_ } _%>
  byteSize,
  <%_ } _%>
  Translate, translate<% if (searchEngine === 'elasticsearch') { %>, ICrudSearchAction<% } %>,
  ICrudGetAllAction<% if (fieldsContainDate) { %>, TextFormat<% } %>
  <%_ if (pagination !== 'no') { _%>
  , getSortState, IPaginationBaseState
  <%_ if (pagination === 'pagination' || pagination === 'pager') { _%>
  , JhiPagination, JhiItemCount
  <%_ }} _%>
} from 'react-jhipster';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

import {Panel, PanelHeader, PanelBody, PanelFooter} from 'app/shared/layout/panel/panel.tsx';

import { IRootState } from 'app/shared/reducers';
import {
  get<%= entityReactName %>State, I<%= entityReactName %>BaseState,
  <%_ if (searchEngine === 'elasticsearch') { _%>
  getSearchEntities,
  <%_ } _%>
  getEntitiesExport
  <%_ if (pagination === 'infinite-scroll') { _%>
  , reset
  <%_ } _%>
} from '../<%= entityFileName %>.reducer';
import { I<%= entityReactName %> } from 'app/shared/model/<%= entityModelFileName %>.model';
 import { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from 'app/config/constants';
<%_ if (pagination !== 'no') { _%>
import { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';
<%_ } _%>



<%_
let hasRelationshipQuery = false;
let otherEntityActions = new Set();
let manyToManyOwners = new Set();
let relFieldNames = new Set();
let uniqueRealtionFields = new Set();


Object.keys(differentRelationships).forEach(key => {

  const hasAnyRelationshipQuery = differentRelationships[key].some(rel =>
      (rel.relationshipType === 'one-to-one' && rel.ownerSide === true && rel.otherEntityName !== 'user')
          || rel.relationshipType !== 'one-to-many'
  );
  if (hasAnyRelationshipQuery) {
    hasRelationshipQuery = true;
    differentRelationships[key].forEach(rel => {
      if (rel.relationshipType === 'many-to-many' && rel.ownerSide === true) {
        manyToManyOwners.add(rel);
      } else {
        relFieldNames.add(rel);
      }
    });
  }
  if (differentRelationships[key].some(rel => rel.relationshipType !== 'one-to-many')) {
    const uniqueRel = differentRelationships[key][0];
    uniqueRealtionFields.add(uniqueRel.otherEntityNamePlural);
    otherEntityActions.add({
      action: `get${upperFirstCamelCase(uniqueRel.otherEntityNamePlural)}`,
      instance: `${uniqueRel.otherEntityNamePlural}`,
      entity: uniqueRel.otherEntityAngularName,
      reducer: uniqueRel.otherEntityAngularName === 'User' ? 'userManagement' : uniqueRel.otherEntityName
    });
    if (uniqueRel.otherEntityAngularName === 'User') {
_%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/user.model';
<%_ if (authenticationType === 'oauth2') { _%>
import { getUsers } from 'app/shared/reducers/user-management';
<%_ } else { _%>
import { getUsers } from 'app/modules/administration/user-management/user-management.reducer';
<%_ } _%>
<%_
  } else {
    if (uniqueRel.otherEntityAngularName !== entityReactName) {
_%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/<%= uniqueRel.otherEntityModelName %>.model';
  <%_ } _%>
import { getEntities as get<%= upperFirstCamelCase(uniqueRel.otherEntityNamePlural) %> } from 'app/entities/<%= uniqueRel.otherEntityPath %>/<%= uniqueRel.otherEntityFileName %>.reducer';
<%_ }
  }
}); _%>



export interface I<%= entityReactName %>Props extends StateProps, DispatchProps, RouteComponentProps<{url: string}> {}


<% if (searchEngine === 'elasticsearch' && pagination !== 'no') { _%>
export interface I<%= entityReactName %>State extends I<%= entityReactName %>BaseState, IPaginationBaseState {
  search: string;
  <%_  if (listButtonsInDropdown === true) { _%> dropdownButtons: {}; <%_ } _%>
}
<%_ } else if (searchEngine === 'elasticsearch') { _%>
export interface I<%= entityReactName %>State extends I<%= entityReactName %>BaseState {
  search: string;
  <%_  if (listButtonsInDropdown === true) { _%> dropdownButtons: {}; <%_ } _%>
}
<%_ } else if (pagination !== 'no') { _%>
export interface I<%= entityReactName %>State extends I<%= entityReactName %>BaseState, IPaginationBaseState {
  exportData: [] | null;
};
<%_ } _%>

export class <%= entityReactName %> extends React.Component<I<%= entityReactName %>Props<% if (searchEngine === 'elasticsearch' || pagination !== 'no') { %>, I<%= entityReactName %>State<% } %>> {
  private myFormRef: any;

  constructor(props: I<%= entityReactName %>Props) {
    super(props);
    <%_ if (searchEngine === 'elasticsearch' || pagination !== 'no') { _%>
      this.state = {
        exportData: null,
        <%_ if (searchEngine === 'elasticsearch') { _%>
        search: '',
        <%_ } _%>
        <%_ if (pagination !== 'no') { _%>
        ...getSortState(this.props.location, ITEMS_PER_PAGE),
        ...get<%= entityReactName %>State(this.props.location)
        <%_ } _%>
      };
      <%_ } _%>
  }

  componentDidMount() {
      this.getEntities();

    <%_ otherEntityActions.forEach(val => { _%>
      this.props.<%= val.action %>();
    <%_ }) _%>
  }


  cancelCourse = () => {
    this.setState(
      {
        <%_ for (idx in fields) { _%>
          <%= fields[idx].fieldName %>: '',
        <%_ } _%>
        <%_ relationships.forEach(rel => { _%>
          <%= rel.relationshipName %>: '',
        <%_ }) _%>
      },
      () => this.sortEntities()
    );
  };
  
  filterEntity = (event, errors, values) => {
    this.setState({
      ...this.state,
      ...values
    }, () => this.sortEntities());
  };
  

  <%_ if (pagination === 'infinite-scroll') { _%>
  componentDidUpdate() {
    if (this.props.updateSuccess) {
      this.reset();
    }
  }
  <%_ } _%>

  <%_ if (searchEngine === 'elasticsearch') { _%>
  search = () => {
    if (this.state.search) {
      <%_ if (pagination === 'infinite-scroll') { _%>
      this.props.reset();
      <%_ } _%>
      <%_ if (pagination !== 'no') { _%>
      this.setState({ activePage: 1 }, () => {
        const { activePage, itemsPerPage, sort, order, search } = this.state;
        this.props.getSearchEntities(search, activePage - 1, itemsPerPage, `${sort},${order}`);
      });
      <%_ } else { _%>
      this.props.getSearchEntities(this.state.search);
      <%_ } _%>
    }
  };

  clear = () => {
    <%_ if (pagination === 'infinite-scroll') { _%>
    this.props.reset();
    <%_ } _%>
    this.setState({ search: ''<% if (pagination !== 'no') { %>, activePage: 1<% } %> }, () => {
      this.props.getEntitiesExport()
    });
  };

  handleSearch = event => this.setState({ search: event.target.value });
  <%_ } _%>

  <%_ if (pagination === 'infinite-scroll') { _%>
  reset = () => {
    this.props.reset();
    this.setState({ activePage: 1 }, () => {
      this.getEntities();
    });
  };

  handleLoadMore = () => {
    if (window.pageYOffset > 0) {
      this.setState({ activePage: this.state.activePage + 1 }, () => this.getEntities());
    }
  };
  <%_ } _%>

  <%_ if (pagination !== 'no') { _%>
  sort = prop => () => {
    this.setState(
      {
        order: this.state.order === 'asc' ? 'desc' : 'asc',
        sort: prop
      },
      () => <% if (pagination === 'infinite-scroll') { %>{ this.reset(); }<% } else { %>this.sortEntities()<% } %>
    );
  };

  <%_ if (pagination === 'pagination' ||Â pagination === 'pager') { _%>
  sortEntities() {
    this.getEntities();
    this.props.history.push(this.props.location.pathname +'?' +this.getFiltersURL());
  }

  getFiltersURL = (offset = null) => {
    return 'page=' + this.state.activePage + '&' +
    'size=' + this.state.itemsPerPage + '&' +
    (offset !== null ? ('offset=' + offset) + '&' : '') +
    'sort=' + this.state.sort + ',' + this.state.order + '&' +
      <%_ for (idx in fields) { _%>
        '<%= fields[idx].fieldName %>=' + this.state.<%= fields[idx].fieldName %> + '&' +
      <%_ } _%>
      <%_ relationships.forEach(rel => { _%>
        '<%= rel.relationshipName %>=' + this.state.<%= rel.relationshipName %> + '&' +
      <%_ }) _%>
    ''
  };
  <%_ } _%>

  <%_ if (pagination === 'pagination' ||Â pagination === 'pager') { _%>
  handlePagination = activePage => this.setState({ activePage }, () => this.sortEntities());
  <%_ } _%>

  getEntities = () => {
    <%_ if (searchEngine === 'elasticsearch') { _%>
    const { activePage, itemsPerPage, sort, order, search } = this.state;
    if (search) {
      this.props.getSearchEntities(search, activePage - 1, itemsPerPage, `${sort},${order}`);
    } else {
      this.props.getEntitiesExport(activePage - 1, itemsPerPage, `${sort},${order}`);
    }
    <%_ } else { _%>
    const {<%_ for (idx in fields) { _%><%= fields[idx].fieldName %>, <%_ } _%><%_ relationships.forEach(rel => { _%><%= rel.relationshipName %>, <%_ }) _%>activePage, itemsPerPage, sort, order } = this.state;
    this.props.getEntitiesExport(<%_ for (idx in fields) { _%><%= fields[idx].fieldName %>, <%_ } _%><%_ relationships.forEach(rel => { _%><%= rel.relationshipName %>, <%_ }) _%>activePage - 1, itemsPerPage, `${sort},${order}`);
    <%_ } _%>
  };
  <%_ } _%>


  async confirmExport() {
    /* eslint-disable require-await */
    const result = await this.getEntities();
    this.setState({
      exportData: result['value']['data']
    })
  };

  handleClose = event => {
    event.stopPropagation();
    this.props.history.goBack();
  };


  render() {
    return( this.state.exportData !== null ? 
        <div> 
          <CSVDownload filename={"my-file.csv"} data={this.state.exportData} target="_blank" />
          {this.props.history.goBack()}
        </div> :
        <Modal isOpen toggle={this.handleClose}>
            <ModalHeader toggle={this.handleClose}>
              <Translate contentKey="entity.delete.title">Confirm delete operation</Translate>
            </ModalHeader>
            <ModalBody id="generadorApp.paciente.delete.question">
              <Translate contentKey="generadorApp.paciente.delete.question">
                Are you sure you want to delete this Paciente?
              </Translate>
            </ModalBody>
            <ModalFooter>
              <Button color="secondary" onClick={this.handleClose}>
                <FontAwesomeIcon icon="ban" />
                &nbsp;
                <Translate contentKey="entity.action.cancel">Cancel</Translate>
              </Button>
              <Button id="jhi-confirm-delete-paciente" color="danger" onClick={this.confirmExport}>
                <FontAwesomeIcon icon="trash" />
                &nbsp;
                <Translate contentKey="entity.action.delete">Export CSV</Translate>
              </Button>
            </ModalFooter>
          </Modal>    
      ) 
  }
}

const mapStateToProps = ({ <%= entityInstance %>, ...storeState  }: IRootState) => ({
  <%_ otherEntityActions.forEach(val => { _%>
    <%= val.instance %>: storeState.<%= val.reducer %>.<%= val.entity === 'User' ? val.instance : 'entities' %>,
  <%_ }) _%>
  <%= entityInstance %>List: <%= entityInstance %>.entities,
  <%_ if (pagination !== 'no') { _%>
  totalItems: <%= entityInstance %>.totalItems,
  <%_ } _%>
  <%_ if (pagination === 'infinite-scroll') { _%>
  links: <%= entityInstance %>.links,
  entity: <%= entityInstance %>.entity,
  updateSuccess: <%= entityInstance %>.updateSuccess,
  <%_ } _%>
});

const mapDispatchToProps = {
  <%_ otherEntityActions.forEach(val => { _%>
    <%= val.action %>,
  <%_ }) _%>
 <%_ if (searchEngine === 'elasticsearch') { _%>
 getSearchEntities,
 <%_ } _%>
 getEntitiesExport,
 <%_ if (pagination === 'infinite-scroll') { _%>
 reset
 <%_ } _%>
};

type StateProps = ReturnType<typeof mapStateToProps>;
type DispatchProps = typeof mapDispatchToProps;

export default connect(mapStateToProps, mapDispatchToProps)(<%= entityReactName %>);
