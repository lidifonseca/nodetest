<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_ function printRelationships(rel){ _%>
<%_ const relationshipType = rel.relationshipType; _%>
<%_ const ownerSide = rel.ownerSide; _%>
<%_ const formLayoutLabel = rel.formLayoutLabel ? rel.formLayoutLabel : 'left' ; _%>
<%_ const formLayoutSize = rel.formLayoutSize ? rel.formLayoutSize : 12; _%>
<%_ const otherEntityName = rel.otherEntityName; _%>
<%_ const otherEntityNamePlural = rel.otherEntityNamePlural; _%>
<%_ const otherEntityNameCapitalized = rel.otherEntityNameCapitalized; _%>
<%_ const relationshipName = rel.relationshipName; _%>
<%_ const relationshipNameHumanized = rel.relationshipNameHumanized; _%>
<%_ const relationshipFieldName = rel.relationshipFieldName; _%>
<%_ const relationshipFieldNamePlural = rel.relationshipFieldNamePlural; _%>
<%_ const otherEntityField = rel.otherEntityField; _%>
<%_ const relationshipRequired = rel.relationshipRequired; _%>
<%_ const translationKey = `${i18nKeyPrefix}.${relationshipName}`; _%>
<%_ if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true && otherEntityName === 'user')) { _%>
  <Col md="<%= formLayoutSize %>">
    <AvGroup>
      <Row>
        <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
          <Label className="mt-2" for="<%= entityFileName %>-<%= relationshipName %>">
            <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
          </Label>
        </Col>
        <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
          <%_ if (dto === 'no') { _%>
            <%_ if (!relationshipRequired) { _%>
              <AvInput id="<%= entityFileName %>-<%= relationshipName %>" type="select" className="form-control"
                  name="<%= relationshipFieldName %>">
                  <option value="null" key="0">{translate("<%= translationKey %>.empty")}</option>
                  {
                  <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map(otherEntity =>
                  <option value={otherEntity.id} key={otherEntity.id}>
                    {otherEntity.<%=otherEntityField%>}
                  </option>
                  ) : null
                  }
              </AvInput>
            <%_ } else { _%>
              <AvInput id="<%= entityFileName %>-<%= relationshipName %>" type="select" className="form-control"
                name="<%= relationshipFieldName %>" value={isNew ? <%= otherEntityNamePlural %>[0] &&
                <%= otherEntityNamePlural %>[0].id : <%= entityInstance %>Entity.<%= relationshipName %>.id} required>
                {
                <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map(otherEntity =>
                <option value={otherEntity.id} key={otherEntity.id}>
                  {otherEntity.<%=otherEntityField%>}
                </option>
                ) : null
                }
              </AvInput>
              <AvFeedback>
                <Translate contentKey="entity.validation.required">This field is required.</Translate>
              </AvFeedback>
            <%_ } _%>
          <%_ } else { _%>
            <%_ if (!relationshipRequired) { _%>
              <AvInput id="<%= entityFileName %>-<%= relationshipName %>" type="select" className="form-control"
                name="<%= relationshipFieldName %>">
                <option value="null" key="0">{translate("<%= translationKey %>.empty")}</option>
                {
                <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map(otherEntity =>
                <option value={otherEntity.id} key={otherEntity.id}>
                  {otherEntity.<%=otherEntityField%>}
                </option>
                ) : null
                }
              </AvInput>
            <%_ } else { _%>
              <AvInput id="<%= entityFileName %>-<%= relationshipName %>" type="select" className="form-control"
                name="<%= relationshipFieldName %>" required>
                {
                <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map(otherEntity =>
                <option value={otherEntity.id} key={otherEntity.id}>
                  {otherEntity.<%=otherEntityField%>}
                </option>
                ) : null
                }
              </AvInput>
              <AvFeedback>
                <Translate contentKey="entity.validation.required">This field is required.</Translate>
              </AvFeedback>
            <%_ } _%>
          <%_ } _%>
        </Col>
      </Row>
    </AvGroup>
  </Col>

<%_ } else if (relationshipType === 'one-to-one' && ownerSide === true) { _%>
  <Col md="<%= formLayoutSize %>">
  <AvGroup>
    <Row>
      <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
      <Label className="mt-2" for="<%= entityFileName %>-<%= relationshipName %>">
        <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
      </Label>
      </Col>
      <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
      <%_ if (dto === 'no') { _%>
      <AvInput id="<%= entityFileName %>-<%= relationshipName %>" type="select" className="form-control"
        name="<%= relationshipFieldName %>">
        <option value="null" key="0">{translate("<%= translationKey %>.empty")}</option>
        {
        <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map(otherEntity =>
        <option value={otherEntity.id} key={otherEntity.id}>
          {otherEntity.<%=otherEntityField%>}
        </option>
        ) : null
        }
      </AvInput>
      <%_ } else { _%>
      <AvInput id="<%= entityFileName %>-<%= relationshipName %>" type="select" className="form-control"
        name="<%= relationshipFieldName %>">
        <option value="" key="0" />
        {
        <%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map(otherEntity =>
        <option value={otherEntity.id} key={otherEntity.id}>
          {otherEntity.<%=otherEntityField%>}
        </option>
        ) : null
        }
      </AvInput>
      <%_ } _%>
    </Col> <br />
  </AvGroup>
  </Col>

<%_ } else if (relationshipType === 'many-to-many' && rel.ownerSide === true) { _%>
  <Col md="<%= formLayoutSize %>">
    <AvGroup>
      <Row>
        <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
        <Label className="mt-2" for="<%= entityFileName %>-<%= relationshipName %>">
          <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
        </Label>
        </Col>
        <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
        <AvInput id="<%= entityFileName %>-<%= relationshipName %>" type="select" multiple className="form-control"
          name="<%= relationshipFieldNamePlural %>" value={<%= entityInstance %>Entity.<%= relationshipFieldNamePlural %>
          && <%= entityInstance %>Entity.<%= relationshipFieldNamePlural %>.map(e=> e.id)}
          >
          <option value="null" key="0">{translate("<%= translationKey %>.empty")}</option>
          {
          (<%= otherEntityNamePlural %>) ? <%= otherEntityNamePlural %>.map(otherEntity =>
          <option value={otherEntity.id} key={otherEntity.id}>
            {otherEntity.<%=otherEntityField%>}
          </option>
          ) : null
          }
        </AvInput>
        </Col>
      </Row>
    </AvGroup> 
  </Col>

<%_ } _%>
<%_ } _%>

<%_ function printFields(field){ _%>

<%_ const formLayoutLabel =  field.formLayoutLabel ?  field.formLayoutLabel : 'left' ; _%>
<%_ const formLayoutSize =  field.formLayoutSize ?  field.formLayoutSize : 12; _%>
<% const fieldType =  field.fieldType; _%>
<% const fieldName =  field.fieldName; _%>
<% const fieldNameHumanized =  field.fieldNameHumanized; _%>

  <Col md="<%= formLayoutSize %>">
    <AvGroup>
      <Row>
        <%_ if (fieldType === 'Boolean') { _%>
          <Col md="12">
            <Label className="mt-2" id="<%= fieldName %>Label" check>
              <AvInput id="<%= entityFileName %>-<%= fieldName %>" type="checkbox" className="form-control"
                name="<%= fieldName %>" />
              <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                <%= fieldNameHumanized %>
              </Translate>
            </Label>
          </Col>
        <%_ } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
          <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
            <Label className="mt-2" id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
              <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                <%= fieldNameHumanized %>
              </Translate>
            </Label>
          </Col>
          <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
            <AvInput id="<%= entityFileName %>-<%= fieldName %>" type="datetime-local" className="form-control"
              name="<%= fieldName %>" placeholder={"YYYY-MM-DD HH:mm"} value={isNew ? null :
              convertDateTimeFromServer(this.props.<%= entityInstance %>Entity.<%= fieldName %>)}
              <%- include react_validators %> />
          </Col>
        <%_ } else if (fieldType === 'LocalDate') { _%>
          <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
            <Label className="mt-2" id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
              <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                <%= fieldNameHumanized %>
              </Translate>
            </Label>
          </Col>
          <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
            <AvField id="<%= entityFileName %>-<%= fieldName %>" type="date" className="form-control" name="<%= fieldName %>"
              <%- include react_validators %> />
          </Col>
        <%_
      } else if ( field.fieldIsEnum) {
        const values =  field.fieldValues.replace(/\s/g, '').split(',');
    _%>
        <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
          <Label className="mt-2" id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
            <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
              <%= fieldNameHumanized %>
            </Translate>
          </Label>
        </Col>
        <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
        <AvInput id="<%= entityFileName %>-<%= fieldName %>" type="select" className="form-control"
          name="<%= fieldName %>" value={(!isNew && <%= entityInstance %>Entity.<%= fieldName%>) || '<%= values[0] %>' }>
          <%_
          const enumPrefix = angularAppName + '.'+ fieldType;
          for (key in values) {
              const value = values[key];
        _%>
          <option value="<%= value %>">
            <%_ if (enableTranslation) { _%>
            {translate("<%= enumPrefix %>.<%= value %>")}
            <%_ } else { _%>
            <%= value %>
            <%_ } _%>
          </option>
          <%_ } _%>
        </AvInput>
        </Col>
        <%_ } else if (['Integer', 'Long', 'Float', 'Double'].includes(fieldType)) { _%>
          <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
            <Label className="mt-2" id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
              <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                <%= fieldNameHumanized %>
              </Translate>
            </Label>
          </Col>
          <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
              <AvField id="<%= entityFileName %>-<%= fieldName %>" type="string" className="form-control" name="<%= fieldName %>" <%- include react_validators %>/> 
          </Col>
        <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType)) {

            const fieldBlobType =  field.fieldTypeBlobContent;
            if (fieldBlobType !== 'text') {
              const isAnImage = fieldBlobType === 'image';
              const capitalizedFirstLetter =  _.upperFirst(fieldName);

        _%>
            <Col md="<%= formLayoutSize %>">
              <AvGroup>
                <Row>
                  <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
                    <Label className="mt-2" id="<%= fieldName %>Label" for="<%= fieldName %>">
                      <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                        <%= fieldNameHumanized %>
                      </Translate>
                    </Label>
                  </Col>
                  <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
                    <br />
                    {<%= fieldName %> ? (
                    <div>
                      <a onClick={openFile(<%= fieldName %>ContentType, <%= fieldName %>)}>
                        <%_ if (isAnImage) { _%>
                        <img src={`data:${<%= fieldName %>ContentType};base64,${<%= fieldName %>}`}
                          style={{ maxHeight: '100px' }} />
                        <%_ } else { _%>
                        <Translate contentKey="entity.action.open">Open</Translate>
                        <%_ } _%>
                      </a>
                      <br />
                      <Row>

                        <Col md="11">
                        <span>{<%= fieldName %>ContentType}, {byteSize(<%= fieldName %>)}</span>
                        </Col>
                        <Col md="1">
                        <Button color="danger" onClick={this.clearBlob('<%= fieldName %>')}>
                          <FontAwesomeIcon icon="times-circle" /></Button>
                        </Col>
                      </Row>
                    </div>
                    ) : null}
                    <input id="file_<%= fieldName %>" type="file" onChange={this.onBlobChange(<%= isAnImage %>, '<%= fieldName %>'
                      )} <% if (isAnImage) { %>accept="image/*" <% } %> />
                    <AvInput type="hidden" name="<%= fieldName %>" value={<%= fieldName %>} <%- include react_validators %> />
                  </Col>
                </Row>
              </AvGroup>  
            </Col>
      <%_ } else { _%>
        <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
          <Label className="mt-2" id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
            <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
              <%= fieldNameHumanized %>
            </Translate>
          </Label>
        </Col>
        <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
          <AvInput id="<%= entityFileName %>-<%= fieldName %>" type="textarea" name="<%= fieldName %>" <%- include react_validators %> />
        </Col>
      <%_ } _%>
    <%_ } else { _%>
      <Col md="<%= formLayoutLabel == 'top' ? 12 : 3  %>">
        <Label className="mt-2" id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
          <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
            <%= fieldNameHumanized %>
          </Translate>
        </Label>
      </Col>
      <Col md="<%= formLayoutLabel == 'top' ? 12 : 9  %>">
        <AvField id="<%= entityFileName %>-<%= fieldName %>" type="text" name="<%= fieldName %>" <%- include react_validators %> />
      </Col>
    <%_ } _%>
    <%_ if ( field.javadoc) { _%>
      <UncontrolledTooltip target="<%= fieldName %>Label">
        <%_ if (enableTranslation) { _%>
          <Translate contentKey="<%= i18nKeyPrefix %>.help.<%= fieldName %>" />
        <%_ } else { _%>
          <%=  field.javadoc %>
        <%_ } _%>
      </UncontrolledTooltip>
    <%_ } _%>
  </Row>
  </AvGroup>
</Col>
<%_ } _%>

<%_
const i18nToLoad = [entityInstance];
for (const idx in fields) {
    if (fields[idx].fieldIsEnum === true) {
        i18nToLoad.push(fields[idx].enumInstance);
    }
}
// const query = generateEntityQueries(relationships, entityInstance, dto);
// const queries = query.queries;
// const variables = query.variables;
// let hasManyToMany = query.hasManyToMany;
_%>
import React from 'react';
import { connect } from 'react-redux';
import { Link, RouteComponentProps } from 'react-router-dom';
import {Panel, PanelHeader, PanelBody, PanelFooter} from 'app/shared/layout/panel/panel.tsx';
import {
Button,
Row,
Col,
Label
<% if (haveFieldWithJavadoc) { %>, UncontrolledTooltip<% } %> } from 'reactstrap';
import { AvFeedback, AvForm, AvGroup, AvInput<% if (fieldsIsReactAvField) { %>, AvField <% } %> } from
'availity-reactstrap-validation';
import {
Translate,
translate,
ICrudGetAction,
ICrudGetAllAction,
<%_ if (fieldsContainBlob) { _%>
setFileData,
<% if (fieldsContainBlobOrImage) { %> openFile,<% } %>
byteSize,
<%_ } _%>
ICrudPutAction
} from 'react-jhipster';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { IRootState } from 'app/shared/reducers';

<%_ if (formTabs.length > 0) { _%>
import { TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap';
import classnames from 'classnames';
<%_ } _%>

<%_
let hasRelationshipQuery = false;
let otherEntityActions = new Set();
let manyToManyOwners = new Set();
let relFieldNames = new Set();
let uniqueRealtionFields = new Set();


Object.keys(differentRelationships).forEach(key => {

  const hasAnyRelationshipQuery = differentRelationships[key].some(rel =>
      (rel.relationshipType === 'one-to-one' && rel.ownerSide === true && rel.otherEntityName !== 'user')
          || rel.relationshipType !== 'one-to-many'
  );
  if (hasAnyRelationshipQuery) {
    hasRelationshipQuery = true;
    differentRelationships[key].forEach(rel => {
      if (rel.relationshipType === 'many-to-many' && rel.ownerSide === true) {
        manyToManyOwners.add(rel);
      } else {
        relFieldNames.add(rel);
      }
    });
  }
  if (differentRelationships[key].some(rel => rel.relationshipType !== 'one-to-many')) {
    const uniqueRel = differentRelationships[key][0];
    uniqueRealtionFields.add(uniqueRel.otherEntityNamePlural);
    otherEntityActions.add({
      action: `get${upperFirstCamelCase(uniqueRel.otherEntityNamePlural)}`,
      instance: `${uniqueRel.otherEntityNamePlural}`,
      entity: uniqueRel.otherEntityAngularName,
      reducer: uniqueRel.otherEntityAngularName === 'User' ? 'userManagement' : uniqueRel.otherEntityName
    });
    if (uniqueRel.otherEntityAngularName === 'User') {
_%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/user.model';
<%_ if (authenticationType === 'oauth2') { _%>
import { getUsers } from 'app/shared/reducers/user-management';
<%_ } else { _%>
import { getUsers } from 'app/modules/administration/user-management/user-management.reducer';
<%_ } _%>
<%_
  } else {
    if (uniqueRel.otherEntityAngularName !== entityReactName) {
_%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/<%= uniqueRel.otherEntityModelName %>.model';
<%_ } _%>
import { getEntities as get<%= upperFirstCamelCase(uniqueRel.otherEntityNamePlural) %> } from
'app/entities/<%= uniqueRel.otherEntityPath %>/<%= uniqueRel.otherEntityFileName %>.reducer';
<%_ }
  }
}); _%>
import {
getEntity,
updateEntity,
createEntity,
<%_ if (fieldsContainBlob) { _%>
setBlob,
<%_ } _%>
reset
} from './<%= entityFileName %>.reducer';
import { I<%= entityReactName %> } from 'app/shared/model/<%= entityModelFileName %>.model';
import { convertDateTimeFromServer, convertDateTimeToServer } from 'app/shared/util/date-utils';
<%_ if (relationships.filter(e => e.relationshipType === 'many-to-many') !== undefined) { _%>
import { mapIdList } from 'app/shared/util/entity-utils';
<%_ } _%>

export interface I<%= entityReactName %>UpdateProps extends StateProps, DispatchProps, RouteComponentProps<{id: string}>
  {}

  export interface I<%= entityReactName %>UpdateState {
  <%_ if (formTabs.length > 0) { _%>activeTab: number;<%_ } _%>
  isNew: boolean;
  <%_ manyToManyOwners.forEach(val => { _%>
  ids<%= val.relationshipName %>: any[];
  <%_ }) _%>
  <%_ relFieldNames.forEach(val => { _%>
  <%= val.relationshipFieldName %>Id: string;
  <%_ }) _%>
  }

  export class <%= entityReactName %>Update extends React.Component<I<%= entityReactName %>UpdateProps,
    I<%= entityReactName %>UpdateState> {

    constructor(props: Readonly<I<%= entityReactName %>UpdateProps>) {
      super(props);
      this.state = {
      <%_ if (formTabs.length > 0) { _%>activeTab: 0,<%_ } _%>
      <%_ manyToManyOwners.forEach(val => { _%>
      ids<%= val.relationshipName %>: [],
      <%_ }) _%>
      <%_ relFieldNames.forEach(val => { _%>
      <%= val.relationshipFieldName %>Id: '0',
      <%_ }) _%>
      isNew: !this.props.match.params || !this.props.match.params.id,
      };
      }
      <%_ if (formTabs.length > 0) { _%>
      toggleTab(tab: number) {
      if (this.state.activeTab !== tab) {
      this.setState({
      activeTab: tab
      });
      }
      }
      <%_ } _%>
      componentDidUpdate (nextProps, nextState) {
      if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {
        this.handleClose();
      }
      }

      componentDidMount() {
      <%_ if (pagination === 'infinite-scroll') { _%>
      if (!this.state.isNew) {
      this.props.getEntity(this.props.match.params.id);
      }
      <%_ } else { _%>
      if (this.state.isNew) {
      this.props.reset();
      } else {
      this.props.getEntity(this.props.match.params.id);
      }
      <%_ } _%>

      <%_ otherEntityActions.forEach(val => { _%>
      this.props.<%= val.action %>();
      <%_ }) _%>
      }

      <%_ if (fieldsContainBlob) {_%>
      onBlobChange = (isAnImage, name) => event => {
      setFileData(event, (contentType, data) => this.props.setBlob(name, data, contentType), isAnImage);
      };

      clearBlob = name => () => {
      this.props.setBlob(name, undefined, undefined);
      };
      <%_ } _%>

      saveEntity = (event: any, errors: any, values: any) => {
      <%_ for (idx in fields) {
        const fieldType = fields[idx].fieldType;
        const fieldName = fields[idx].fieldName;
    _%>
      <%_ if (fieldType === 'Instant' || fieldType === 'ZonedDateTime')  { _%>
      values.<%=fieldName%> = convertDateTimeToServer(values.<%= fieldName %>);
      <%_ } _%>
      <%_ } _%>

      if (errors.length === 0) {
      const { <%= entityInstance %>Entity } = this.props;
      const entity = {
      ...<%= entityInstance %>Entity,
      ...values
      <%_ manyToManyOwners.forEach(rel => { _%>
      , <%= rel.relationshipFieldNamePlural %>: mapIdList(values.<%= rel.relationshipFieldNamePlural %>)
      <%_ }) _%>
      }

      if (this.state.isNew) {
      this.props.createEntity(entity);
      } else {
      this.props.updateEntity(entity);
      }
      }
      }

      handleClose = () => {
      this.props.history.push('/<%= entityFileName %>');
      }

      render() {
      const { <%= entityInstance %>Entity,<%
    uniqueRealtionFields.forEach(rel => {
    %> <%= rel %>,<% }) %> loading, updating } = this.props;
      const { isNew } = this.state;

      <%_ for (var i = 0; i < blobFields.length; i++) { _%>
      <%_
      const b = blobFields[i];
      if (i === 0) {
    _%>
      const {
      <%_ } _%>
      <%= b.fieldName %>
      <%_ if (b.fieldTypeBlobContent !== 'text') { _%>
      , <%= b.fieldName %>ContentType
      <%_ } _%>
      <%_ if (i+1 === blobFields.length) { _%>
      } = <%= entityInstance %>Entity;
      <%_ } else { _%>
      ,
      <%_ } _%>
      <%_ } _%>

      return (

      <div>
        <ol className="breadcrumb float-xl-right">
          <li className="breadcrumb-item">
            <Link to="/">Inicio</Link>
          </li>
          <li className="breadcrumb-item active"><%= entityClassPluralHumanized %></li>
          <li className="breadcrumb-item active"><%= entityClassPluralHumanized %> edit</li>
        </ol>
        <h1 className="page-header">&nbsp;&nbsp;</h1>
        <AvForm model={isNew ? {} : {
          ...<%= entityInstance %>Entity, 
          <%_ if (formTabs.length > 0) { _%>activeTab: 0,<%_ } _%>
          <%_ relFieldNames.forEach(val => { _%>
            <%= val.relationshipFieldName %>:<%= entityInstance %>Entity.<%= val.relationshipFieldName %> ? <%= entityInstance %>Entity.<%= val.relationshipFieldName %>.id: null,
          <%_ }) _%>
        } } onSubmit={this.saveEntity}>
          <Panel>
            <PanelHeader>
              <h2 id="page-heading">
                <span className="page-header ml-3">
                  <Translate contentKey="<%= i18nKeyPrefix %>.home.createOrEditLabel">Create or edit a
                    <%= entityClass %></Translate>
                </span>


                <Button color="primary" id="save-entity" type="submit" disabled={updating}
                  className="float-right jh-create-entity">
                  <FontAwesomeIcon icon="save" />&nbsp;
                  <Translate contentKey="entity.action.save">Save</Translate>
                </Button>
                <Button tag={Link} id="cancel-save" to="/<%= entityFileName %>" replace color="info"
                  className="float-right jh-create-entity">
                  <FontAwesomeIcon icon="arrow-left" />&nbsp;
                  <span className="d-none d-md-inline">
                    <Translate contentKey="entity.action.back">Back</Translate>
                  </span>
                </Button>
              </h2>
            </PanelHeader>
            <PanelBody>
              <Row className="justify-content-center">
                <Col md="8">
                { loading ? <p>Loading...</p> :
                <Row>
                  { !isNew ?
                  <AvGroup>
                    <Row>
                      {/*
                      <Col md="3">
                      <Label className="mt-2" for="<%= entityFileName %>-id">
                        <Translate contentKey="global.field.id">ID</Translate>
                      </Label>
                      </Col> */}
                      <Col md="12">
                        <AvInput id="<%= entityFileName %>-id" type="hidden" className="form-control" name="id" required readOnly />
                      </Col>
                    </Row>
                  </AvGroup> 
                  : null
                  }
                  <%_ if (formTabs.length === 0) { _%>
                        <%_ if (formLayout.length > 0) {  _%>
                            <%_ for (idx in formLayout) { 
                                if(formLayout[idx].type == 'field'){
                                  printFields(formLayout[idx].entity);
                                } else {
                                  printRelationships(formLayout[idx].entity);
                                }
                            } _%>
                        <%_ } else { _%>
                            <%_ for (idx in fields) { 
                                  printFields(fields[idx]);
                              } _%>
                            <%_ relationships.forEach(rel => { 
                                  printRelationships(rel);
                            }) _%>
                        <%_ } _%>
                  <%_ } else { _%>
                  { !isNew ? <Nav tabs>
                    <%_ for (idx in formTabs) { _%>
                    <NavItem>
                      <NavLink className={classnames({ active: this.state.activeTab===<%= idx %> })} onClick={()=> {
                        this.toggleTab(<%= idx %>); }}
                        >
                        <span className="d-sm-none"> <%= formTabs[idx] %></span>
                        <span className="d-sm-block d-none"><%= formTabs[idx] %></span>
                      </NavLink>
                    </NavItem>
                    <%_ } _%>
                    <%_ if(defaultFormTab) { _%>
                    <NavItem>
                      <NavLink className={classnames({ active: this.state.activeTab===<%= formTabs.length %> })}
                        onClick={()=> { this.toggleTab(<%= formTabs.length %>); }}
                        >
                        <span className="d-sm-none">Default</span>
                        <span className="d-sm-block d-none">Default</span>
                      </NavLink>
                    </NavItem>
                    <%_ } _%>
                  </Nav> : null }
                  <TabContent activeTab={this.state.activeTab}>
                    <%_ for (iTabs in formTabs) { _%>
                    <TabPane tabId={<%= iTabs %>}>
                      { isNew ?
                      <Row className="justify-content-center mb-3">
                        <Col md="12">
                        <h2 id="<%= i18nKeyPrefix %>.home.formTabs_<%= idx %>">
                          <%= formTabs[iTabs] %>
                        </h2>
                        </Col>
                      </Row> : null }

                      <%_ if (formLayout.length > 0) {  _%>
                            <%_ for (idx in formLayout) { 
                              if(formTabs[iTabs] === formLayout[idx].entity['formTab']) { 
                                if(formLayout[idx].type == 'field'){
                                  printFields(formLayout[idx].entity);
                                } else {
                                  printRelationships(formLayout[idx].entity);
                                }
                              } 
                            } _%>
                      <%_ } else { _%>
                            <%_ for (idx in fields) { 
                                  if(formTabs[iTabs] === fields[idx]['formTab']) { 
                                    printFields(fields[idx]);
                                  } 
                                } _%>
                            <%_ relationships.forEach(rel => { 
                                if(formTabs[iTabs] === rel['formTab']) { 
                                  printRelationships(rel);
                                }
                              }) _%>
                      <%_ } _%>

                      <%_ if(Number.parseInt(iTabs, 10) + 1 < formTabs.length + (defaultFormTab ? 1 : 0)  ) { _%>
                      { isNew ?
                      <Button color="primary" className={"float-right jh-create-entity"} onClick={()=> {
                        this.toggleTab(<%= Number.parseInt(iTabs, 10) + 1 %>); }}
                        >
                        <span className="d-sm-none">
                          <%= formTabs[Number.parseInt(iTabs, 10) + 1] ? formTabs[Number.parseInt(iTabs, 10) + 1] : "Default" %>
                        </span>
                        <span className="d-sm-block d-none">
                          <%= formTabs[Number.parseInt(iTabs, 10) + 1] ? formTabs[Number.parseInt(iTabs, 10) + 1] : "Default" %>
                          &nbsp;
                          <FontAwesomeIcon icon="arrow-right" />
                        </span>
                      </Button>
                      : null }
                      <%_ } else { _%>
                      { isNew ?
                      <Button color="primary" id="save-entity" type="submit" disabled={updating}
                        className="btn btn-primary float-right jh-create-entity">
                        <FontAwesomeIcon icon="save" />&nbsp;
                        <Translate contentKey="entity.action.save">Save</Translate>
                      </Button>
                      : null }
                      <%_ } _%>

                      <%_ if(iTabs > 0 ) { _%>
                      { isNew ?
                      <Button color="info" className={"float-right jh-create-entity"} onClick={()=> {
                        this.toggleTab(<%= Number.parseInt(iTabs, 10) - 1 %>); }}
                        >

                        <span className="d-sm-none"> <%= formTabs[Number.parseInt(iTabs, 10) - 1] %> </span>
                        <span className="d-sm-block d-none">
                          <FontAwesomeIcon icon="arrow-left" />&nbsp;
                          <%= formTabs[Number.parseInt(iTabs, 10) - 1] %>
                        </span>
                      </Button>
                      : null }
                      <%_ } _%>
                    </TabPane>
                    <%_ } _%>
                    <%_ if(defaultFormTab) { _%>
                    <TabPane tabId={<%= formTabs.length %>}>
                      { isNew ?
                      <Row className="justify-content-center mb-3">
                        <Col md="12">
                        <h2 id="<%= i18nKeyPrefix %>.home.formTabs_default">
                          Default
                        </h2>
                        </Col>
                      </Row> : null }

                      <%_ if (formLayout.length > 0) {  _%>
                              <%_ for (idx in formLayout) { 
                                if(!formLayout[idx].entity['formTab'] || formLayout[idx].entity['formTab'] === "default") { 
                                  if(formLayout[idx].type == 'field'){
                                    printFields(formLayout[idx].entity);
                                  } else {
                                    printRelationships(formLayout[idx].entity);
                                  }
                                } 
                              } _%>
                      <%_ } else { _%>
                              <%_ for (idx in fields) { 
                                if(!fields[idx]['formTab'] || fields[idx]['formTab'] === "default") { 
                                  printFields(fields[idx]);
                                } 
                              } _%>
                              <%_ relationships.forEach(rel => { 
                                if(!rel['formTab'] || rel['formTab'] === "default") { 
                                  printRelationships(rel);
                                }
                              }) _%>
                      <%_ } _%>


                      { isNew ?
                      <Button color="primary" id="save-entity" type="submit" disabled={updating}
                        className="btn btn-primary float-right jh-create-entity">
                        <FontAwesomeIcon icon="save" />&nbsp;
                        <Translate contentKey="entity.action.save">Save</Translate>
                      </Button>
                      : null }

                      <%_ if(formTabs.length > 0 ) { _%>
                      { isNew ?
                      <Button color="info" className={"float-right jh-create-entity "}
                                     onClick={() => { this.toggleTab(<%= formTabs.length -1 %>); }}
                                     >
                                        
                                       <span className=" d-sm-none"> <%= formTabs[formTabs.length - 1] %> </span>
                        <span className="d-sm-block d-none">
                          <FontAwesomeIcon icon="arrow-left" />&nbsp;
                          <%= formTabs[formTabs.length - 1] %>
                        </span>
                      </Button>
                      : null }
                      <%_ } _%>

                    </TabPane>
                    <%_ } _%>

                  </TabContent>
                  <%_ } _%>



                </Row>

                }
                </Col>
              </Row>

            </PanelBody>
          </Panel>
        </AvForm>
      </div>
      );
      }
      }

      const mapStateToProps = (storeState: IRootState) => ({
      <%_ otherEntityActions.forEach(val => { _%>
      <%= val.instance %>: storeState.<%= val.reducer %>.<%= val.entity === 'User' ? val.instance : 'entities' %>,
      <%_ }) _%>
      <%= entityInstance %>Entity: storeState.<%= entityInstance %>.entity,
      loading: storeState.<%= entityInstance %>.loading,
      updating: storeState.<%= entityInstance %>.updating,
      updateSuccess: storeState.<%= entityInstance %>.updateSuccess,
      });

      const mapDispatchToProps = {
      <%_ otherEntityActions.forEach(val => { _%>
      <%= val.action %>,
      <%_ }) _%>
      getEntity,
      updateEntity,
      <%_ if (fieldsContainBlob) { _%>
      setBlob,
      <%_ } _%>
      createEntity,
      reset
      };

      type StateProps = ReturnType<typeof mapStateToProps>;
        type DispatchProps = typeof mapDispatchToProps;

        export default connect(mapStateToProps, mapDispatchToProps)(<%= entityReactName %>Update);