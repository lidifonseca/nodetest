<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>


<%_ function printRelationshipsFilters(rel){ 

    const listFilterLayoutLabel = rel.listFilterLayoutLabel ? rel.listFilterLayoutLabel : 'left' ; 
    const listFilterLayoutSize = rel.listFilterLayoutSize ? rel.listFilterLayoutSize : 3; 
    const relationshipType = rel.relationshipType;
    const ownerSide = rel.ownerSide;
    const otherEntityName = rel.otherEntityName;
    const otherEntityNamePlural = rel.otherEntityNamePlural;
    const otherEntityNameCapitalized = rel.otherEntityNameCapitalized;
    const relationshipName = rel.relationshipName;
    const relationshipNameHumanized = rel.relationshipNameHumanized;
    const relationshipFieldName = rel.relationshipFieldName;
    const relationshipFieldNamePlural = rel.relationshipFieldNamePlural;
    const otherEntityField = rel.otherEntityField;
    const otherEntityFieldCapitalized = rel.otherEntityFieldCapitalized;
    const relationshipRequired = rel.relationshipRequired;
    const translationKey = `${i18nKeyPrefix}.${relationshipName}`; _%>
        
    { this.state.baseFilters !== '<%= relationshipFieldName %>' ? 
      <Col md="<%= listFilterLayoutSize %>">
        <Row className="mr-1 mt-1">
          <%_ if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true && otherEntityName === 'user')) { _%>
        <div style={{width: '100%'}}>
        <Label for="<%= entityFileName %>-<%= relationshipName %>">
          <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
        </Label>
        <%_ if (dto === 'no') { _%>
            <%_ if (!relationshipRequired) { _%>
          <Select 
            id="<%= entityFileName %>-<%= relationshipName %>" isMulti className={"css-select-control"}
            value={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((p)=>(this.state.<%= relationshipName %>.split(",").indexOf(p.id) !== -1 ? {value: p.id , label: p.<%=otherEntityField ? otherEntityField : 'id' %>} : null)) : null} 
            options={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((option)=>({value: option.id , label: option.<%=otherEntityField%>})) : null} 
            onChange={options => this.setState({ <%= relationshipName %>: options.map((option)=>(option['value'])).join(",") }) }
            name={"<%= relationshipFieldName %>"} 
          />
        <%_ } else { _%>
          <Select 
            id="<%= entityFileName %>-<%= relationshipName %>" isMulti className={"css-select-control"}
            value={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((p)=>(this.state.<%= relationshipName %>.split(",").indexOf(p.id) !== -1 ? {value: p.id , label: p.<%= otherEntityField ? otherEntityField : 'id' %>} : null)) : null} 
            options={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((option)=>({value: option.id , label: option.<%=otherEntityField%>})) : null} 
            onChange={options => this.setState({ <%= relationshipName %>: options.map((option)=>(option['value'])).join(",") }) }
            name={"<%= relationshipFieldName %>"} 
          />
        <%_ } _%>
        <%_ } else { _%>
          <%_ if (!relationshipRequired) { _%>
            <Select 
              id="<%= entityFileName %>-<%= relationshipName %>" isMulti className={"css-select-control"}
              value={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((p)=>(this.state.<%= relationshipName %>.split(",").indexOf(p.id) !== -1 ? {value: p.id , label: p.<%=otherEntityField ? otherEntityField : 'id' %>} : null)) : null} 
              options={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((option)=>({value: option.id , label: option.<%=otherEntityField%>})) : null} 
              onChange={options => this.setState({ <%= relationshipName %>: options.map((option)=>(option['value'])).join(",") }) }
              name={"<%= relationshipFieldName %>"} 
            />
          <%_ } else { _%>
            <Select 
              id="<%= entityFileName %>-<%= relationshipName %>" isMulti className={"css-select-control"}
              value={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((p)=>(this.state.<%= relationshipName %>.split(",").indexOf(p.id) !== -1 ? {value: p.id , label: p.<%=otherEntityField ? otherEntityField : 'id' %>} : null)) : null} 
              options={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((option)=>({value: option.id , label: option.<%=otherEntityField%>})) : null} 
              onChange={options => this.setState({ <%= relationshipName %>: options.map((option)=>(option['value'])).join(",") }) }
              name={"<%= relationshipFieldName %>"} 
            />
          <%_ } _%>
        <%_ } _%>
        </div>
          <%_ } else if (relationshipType === 'one-to-one' && ownerSide === true) { _%>
        <div style={{width: '100%'}}>
        <Label for="<%= entityFileName %>-<%= relationshipName %>">
          <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
        </Label>
          <%_ if (dto === 'no') { _%>
            <Select 
              id="<%= entityFileName %>-<%= relationshipName %>" isMulti className={"css-select-control"}
              value={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((p)=>(this.state.<%= relationshipName %>.split(",").indexOf(p.id) !== -1 ? {value: p.id , label: p.<%=otherEntityField%>} : null)) : null} 
              options={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((option)=>({value: option.id , label: option.<%=otherEntityField%>})) : null} 
              onChange={options => this.setState({ <%= relationshipName %>: options.map((option)=>(option['value'])).join(",") }) }
              name={"<%= relationshipFieldName %>"} 
            />
          <%_ } else { _%>
            <Select 
              id="<%= entityFileName %>-<%= relationshipName %>" isMulti className={"css-select-control"}
              value={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((p)=>(this.state.<%= relationshipName %>.split(",").indexOf(p.id) !== -1 ? {value: p.id , label: p.<%=otherEntityField ? otherEntityField : 'id' %>} : null)) : null} 
              options={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((option)=>({value: option.id , label: option.<%=otherEntityField%>})) : null} 
              onChange={options => this.setState({ <%= relationshipName %>: options.map((option)=>(option['value'])).join(",") }) }
              name={"<%= relationshipFieldName %>"} 
            />
          <%_ } _%>
        </div>
          <%_ } else if (relationshipType === 'many-to-many' && rel.ownerSide === true) { _%>
        <div style={{width: '100%'}}>
        <Label for="<%= entityFileName %>-<%= relationshipName %>"><Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate></Label>
        <Select 
          id="<%= entityFileName %>-<%= relationshipName %>" isMulti  className={"css-select-control"}
          value={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((p)=>(this.state.<%= relationshipName %>.split(",").indexOf(p.id) !== -1 ? {value: p.id , label: p.<%=otherEntityField ? otherEntityField : 'id' %>} : null)) : null} 
          options={<%= otherEntityNamePlural %> ? <%= otherEntityNamePlural %>.map((option)=>({value: option.id , label: option.<%=otherEntityField%>})) : null} 
          onChange={options => this.setState({ <%= relationshipName %>: options.map((option)=>(option['value'])).join(",") }) }
          name={"<%= relationshipFieldName %>"} 
        />
        </div>
        <%_ } _%>
        </Row>
      </Col> 
    : null }

<%_ } _%>

<%_ function printFieldsFilters(field){ 
    const listFilterLayoutLabel = field.listFilterLayoutLabel ? field.listFilterLayoutLabel : 'left' ; 
    const listFilterLayoutSize = field.listFilterLayoutSize ? field.listFilterLayoutSize : 3; 
    const fieldType = field.fieldType;
    const fieldName = field.fieldName;
    const fieldNameHumanized = field.fieldNameHumanized;
_%>
        
    { this.state.baseFilters !== '<%= fieldName %>' ? 
      <Col md="<%= listFilterLayoutSize %>">
        <Row className="mr-1 mt-1">
          <%_ if (fieldType === 'Boolean') { _%>
          <Label id="<%= fieldName %>Label" check>
            <AvInput id="<%= entityFileName %>-<%= fieldName %>" type="checkbox" className="form-control" name="<%= fieldName %>" />
            <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
              <%= fieldNameHumanized %>
            </Translate>
          </Label>
          <%_ } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
          <Label id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
            <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
              <%= fieldNameHumanized %>
            </Translate>
          </Label>
          <AvInput
            id="<%= entityFileName %>-<%= fieldName %>"
            type="datetime-local"
            className="form-control"
            name="<%= fieldName %>"
            placeholder={"YYYY-MM-DD HH:mm"}
            value={this.state.<%= fieldName %> ? convertDateTimeFromServer(this.state.<%= fieldName %>) : null }
          />
          <%_ } else if (fieldType === 'LocalDate') { _%>
          <Label id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
            <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
              <%= fieldNameHumanized %>
            </Translate>
          </Label>
          <AvInput type="date" name="<%= fieldName %>" id="<%= entityFileName %>-<%= fieldName %>"  value={this.state.<%= fieldName %>}   />
          <%_
          } else if (field.fieldIsEnum) {
            const values = field.fieldValues.replace(/\s/g, '').split(',');
          _%>
          <Label id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
            <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
              <%= fieldNameHumanized %>
            </Translate>
          </Label>
          <AvInput
            id="<%= entityFileName %>-<%= fieldName %>"
            type="select"
            className="form-control"
            name="<%= fieldName %>"
            value={(!isNew && <%= entityInstance %>Entity.<%= fieldName%>) || '<%= values[0] %>'}
          >
          <%_
            const enumPrefix = angularAppName + '.'+ fieldType;
            for (key in values) {
                const value = values[key];
          _%>
            <option value="<%= value %>">
            <%_ if (enableTranslation) { _%>
              {translate("<%= enumPrefix %>.<%= value %>")}
            <%_ } else { _%>
              <%= value %>
            <%_ } _%>
            </option>
          <%_ } _%>
          </AvInput>
          <%_ } else if (['Integer', 'Long', 'Float', 'Double'].includes(fieldType)) { _%>
          <Label id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
            <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
              <%= fieldNameHumanized %>
            </Translate>
          </Label>
          <AvInput type="string" name="<%= fieldName %>" id="<%= entityFileName %>-<%= fieldName %>"  value={this.state.<%= fieldName %>}   />
          <%_ } else if (['byte[]', 'ByteBuffer', 'Blob', 'TextBlob'].includes(fieldType)) { _%>
            <%_ const fieldBlobType = field.fieldTypeBlobContent; _%>
            <%_ if (fieldBlobType !== 'text') {  _%>
                <%_ const isAnImage = fieldBlobType === 'image'; _%>
                <%_ const capitalizedFirstLetter =  _.upperFirst(fieldName); _%>
            <%_ } else { _%>
                <Label id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
                  <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                    <%= fieldNameHumanized %>
                  </Translate>
                </Label>
                <AvInput id="<%= entityFileName %>-<%= fieldName %>" type="textarea" name="<%= fieldName %>" />
            <%_ } _%>
          <%_ } else { _%>
          <Label id="<%= fieldName %>Label" for="<%= entityFileName %>-<%= fieldName %>">
          <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
            <%= fieldNameHumanized %>
          </Translate>
          </Label>

          <AvInput type="text" name="<%= fieldName %>" id="<%= entityFileName %>-<%= fieldName %>"  value={this.state.<%= fieldName %>}   />
          <%_ } _%>
          <%_ if (field.clean_javadoc) { _%>
          <UncontrolledTooltip target="<%= fieldName %>Label">
          <%_ if (enableTranslation) { _%>
          <Translate contentKey="<%= i18nKeyPrefix %>.help.<%= fieldName %>"/>
          <%_ } else { _%>
          <%= field.clean_javadoc %>
          <%_ } _%>
          </UncontrolledTooltip>
          <%_ } _%>
        </Row>
      </Col>
    : null }
<%_ } _%>


<%_ function printFieldsTable(field){ _%>

  <%_ const fieldType = field.fieldType; _%>
  <%_ const fieldName = field.fieldName; _%>
  <%_ const fieldIsEnum = field.fieldIsEnum; _%>

  { this.state.baseFilters !== '<%= fieldName %>' ? 
    <td>
      <%_ if (fieldType === 'Boolean') { _%>
        {<%= entityInstance %>.<%=field.fieldName%> ? 'true' : 'false'}
      <%_ } else if (fieldType === 'Instant' || fieldType === 'ZonedDateTime') { _%>
        <TextFormat type="date" value={<%= entityInstance %>.<%=fieldName%>} format={APP_DATE_FORMAT} />
      <%_ } else if (fieldType === 'LocalDate') { _%>
        <TextFormat type="date" value={<%= entityInstance %>.<%=fieldName%>} format={APP_LOCAL_DATE_FORMAT} />
      <%_ } else if (fieldIsEnum && enableTranslation) { _%>
        <Translate contentKey={`<%= angularAppName %>.<%= fieldType %>.${<%= entityInstance %>.<%= fieldName %>}`} />
      <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType)) { _%>
        <%_
          // blobFields
          const fieldBlobType = field.fieldTypeBlobContent;
          if (fieldBlobType !== 'text') {
        _%>
          {<%= entityInstance %>.<%= fieldName %> ? (
            <div>
              <a rel="noopener noreferrer" target={"_blank"} href={`${<%= entityInstance %>.<%= fieldName %>}`}>
                { (<%= entityInstance %>.<%= fieldName %>ContentType && <%= entityInstance %>.<%= fieldName %>ContentType.includes("image/")) ? 
                  <img src={`${<%= entityInstance %>.<%= fieldName %>}`} style={{ maxHeight: '30px' }} />
                  :
                  <Translate contentKey="entity.action.open">Open</Translate>
                } 
              </a>
            </div>
          ) : null}
        <%_ } else { _%>
          {<%= entityInstance %>.<%= fieldName %> ? (Buffer.from(<%= entityInstance %>.<%= fieldName %>)).toString() : null }
        <%_ } _%>
      <%_ } else { _%>
        {<%= entityInstance %>.<%= fieldName %>}
      <%_ } _%>
    </td>
  : null }
<%_ } _%>


<%_ function printRelationshipsTable(rel) { _%>
  <%_ const relationshipType = rel.relationshipType; _%>
  <%_ const ownerSide = rel.ownerSide; _%>
  <%_ const relationshipFieldName = rel.relationshipFieldName; _%>
  <%_ const relationshipFieldNamePlural = rel.relationshipFieldNamePlural; _%>
  <%_ const otherEntityName = rel.otherEntityName; _%>
  <%_ const otherEntityStateName = rel.otherEntityStateName; _%>
  <%_ const otherEntityField = rel.otherEntityField; _%>
  <%_ const otherEntityFieldCapitalized = rel.otherEntityFieldCapitalized; _%>
    <%_ if (relationshipType === 'many-to-one'
    || (relationshipType === 'one-to-one' && ownerSide === true)
    || (relationshipType === 'many-to-many' && ownerSide === true && pagination === 'no')) { _%>

      { this.state.baseFilters !== '<%= relationshipFieldName %>' ? 
        <td>
          <%_ if (otherEntityName === 'user') { _%>
            <%_ if (relationshipType === 'many-to-many') { _%>
                {
                  (<%= entityInstance %>.<%= relationshipFieldNamePlural %>) ?
                      (<%= entityInstance %>.<%= relationshipFieldNamePlural %>.map((val, j) =>
                          <span key={j}>{val.<%= otherEntityField %>}{(j === <%= entityInstance %>.<%= relationshipFieldNamePlural %>.length - 1) ? '' : ', '}</span>
                      )
                  ) : null
                }
            <%_ } else { _%>
                  <%_ if (dto === 'no') { _%>
                  {<%= entityInstance + "." + relationshipFieldName %> ? <%= entityInstance + "." + relationshipFieldName + "." + otherEntityField %> : ''}
                      <%_ } else { _%>
                  {<%= entityInstance + "." + relationshipFieldName + otherEntityFieldCapitalized %> ? <%= entityInstance + "." + relationshipFieldName + otherEntityFieldCapitalized %> : ''}
                    <%_ } _%>
            <%_ } _%>
          <%_ } else { _%>
              <%_ if (relationshipType === 'many-to-many') { _%>
                  {
                    (<%= entityInstance %>.<%= relationshipFieldNamePlural %>) ?
                        (<%= entityInstance %>.<%= relationshipFieldNamePlural %>.map((val, j) =>
                            <span key={j}><Link to={`<%= otherEntityStateName %>/${val.id}`}>{val.<%= otherEntityField %>}</Link>{(j === <%= entityInstance %>.<%= relationshipFieldNamePlural %>.length - 1) ? '' : ', '}</span>
                        )
                    ) : null
                  }
            <%_ } else { _%>
                  <%_ if (dto === 'no') { _%>
            {<%= entityInstance + "." + relationshipFieldName %> ?
            <Link to={`<%= otherEntityStateName %>/${<%= entityInstance + "." + relationshipFieldName + ".id}" %>`}>
              {<%= entityInstance + "." + relationshipFieldName + "." + otherEntityField %>}
            </Link> : ''}
                  <%_ } else { _%>
            {<%= entityInstance + "." + relationshipFieldName %> ?
            <Link to={`<%= otherEntityStateName %>/${<%= entityInstance + "." + relationshipFieldName + ".id}" %>`}>
              {<%= entityInstance + "." + relationshipFieldName + ".id" %>}
            </Link> : ''}
                  <%_ } _%>
              <%_ } _%>
            <%_ } _%>
        </td>
      : null }
    <%_ } _%>
<%_ } _%>

/* eslint complexity: ["error", 300] */
import React from 'react';
<%_ if (pagination === 'infinite-scroll') { _%>
import InfiniteScroll from 'react-infinite-scroller';
<%_ } _%>
import { convertDateTimeFromServer, convertDateTimeToServer } from 'app/shared/util/date-utils';
import { connect } from 'react-redux';
import Select from 'react-select';
import { Link, RouteComponentProps } from 'react-router-dom';
import { Button, <% if (searchEngine === 'elasticsearch') { %>InputGroup, <% } %>Col, Row, Table, Label, UncontrolledTooltip, UncontrolledCollapse, CardHeader, CardBody,
<%_  if (listButtonsInDropdown === true) { _%> Dropdown, DropdownToggle,  DropdownMenu,  DropdownItem, <%_ } _%> UncontrolledAlert } from 'reactstrap';
import { AvForm, div, AvInput } from 'availity-reactstrap-validation';
import {
  <%_ if (blobFields.length > 0) { _%>
    <%_ if (fieldsContainBlobOrImage) { _%>
  openFile,
    <%_ } _%>
  <%_ } _%>
  Translate, translate<% if (searchEngine === 'elasticsearch') { %>, ICrudSearchAction<% } %>,
  ICrudGetAllAction<% if (fieldsContainDate) { %>, TextFormat<% } %>
  <%_ if (pagination !== 'no') { _%>
  , getSortState, IPaginationBaseState
  <%_ if (pagination === 'pagination' || pagination === 'pager') { _%>
  , JhiPagination, JhiItemCount
  <%_ }} _%>
} from 'react-jhipster';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

import {Panel, PanelHeader, PanelBody, PanelFooter} from 'app/shared/layout/panel/panel.tsx';

import { IRootState } from 'app/shared/reducers';
import {
  get<%= entityReactName %>State, I<%= entityReactName %>BaseState,
  <%_ if (searchEngine === 'elasticsearch') { _%>
  getSearchEntities,
  <%_ } _%>
  getEntities
  <%_ if (pagination === 'infinite-scroll') { _%>
  , reset
  <%_ } _%>
} from './<%= entityFileName %>.reducer';
import { I<%= entityReactName %> } from 'app/shared/model/<%= entityModelFileName %>.model';
 import { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from 'app/config/constants';
<%_ if (pagination !== 'no') { _%>
import { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';
<%_ } _%>



<%_
let hasRelationshipQuery = false;
let otherEntityActions = new Set();
let manyToManyOwners = new Set();
let relFieldNames = new Set();
let uniqueRealtionFields = new Set();


Object.keys(differentRelationships).forEach(key => {

  const hasAnyRelationshipQuery = differentRelationships[key].some(rel =>
      (rel.relationshipType === 'one-to-one' && rel.ownerSide === true && rel.otherEntityName !== 'user')
          || rel.relationshipType !== 'one-to-many'
  );
  if (hasAnyRelationshipQuery) {
    hasRelationshipQuery = true;
    differentRelationships[key].forEach(rel => {
      if (rel.relationshipType === 'many-to-many' && rel.ownerSide === true) {
        manyToManyOwners.add(rel);
      } else {
        relFieldNames.add(rel);
      }
    });
  }
  if (differentRelationships[key].some(rel => rel.relationshipType !== 'one-to-many')) {
    const uniqueRel = differentRelationships[key][0];
    uniqueRealtionFields.add(uniqueRel.otherEntityNamePlural);
    otherEntityActions.add({
      action: `get${upperFirstCamelCase(uniqueRel.otherEntityNamePlural)}`,
      instance: `${uniqueRel.otherEntityNamePlural}`,
      entity: uniqueRel.otherEntityAngularName,
      reducer: uniqueRel.otherEntityAngularName === 'User' ? 'userManagement' : uniqueRel.otherEntityName
    });
    if (uniqueRel.otherEntityAngularName === 'User') {
_%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/user.model';
<%_ if (authenticationType === 'oauth2') { _%>
import { getUsers } from 'app/shared/reducers/user-management';
<%_ } else { _%>
import { getUsers } from 'app/modules/administration/user-management/user-management.reducer';
<%_ } _%>
<%_
  } else {
    if (uniqueRel.otherEntityAngularName !== entityReactName) {
_%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/<%= uniqueRel.otherEntityModelName %>.model';
  <%_ } _%>
import { getEntities as get<%= upperFirstCamelCase(uniqueRel.otherEntityNamePlural) %> } from 'app/entities/<%= uniqueRel.otherEntityPath %>/<%= uniqueRel.otherEntityFileName %>.reducer';
<%_ }
  }
}); _%>



export interface I<%= entityReactName %>Props extends StateProps, DispatchProps, RouteComponentProps<{url: string}> {}


<% if (searchEngine === 'elasticsearch' && pagination !== 'no') { _%>
export interface I<%= entityReactName %>State extends I<%= entityReactName %>BaseState, IPaginationBaseState {
  search: string;
  <%_  if (listButtonsInDropdown === true) { _%> dropdownButtons: {}; <%_ } _%>
}
<%_ } else if (searchEngine === 'elasticsearch') { _%>
export interface I<%= entityReactName %>State extends I<%= entityReactName %>BaseState {
  search: string;
  <%_  if (listButtonsInDropdown === true) { _%> dropdownButtons: {}; <%_ } _%>
}
<%_ } else if (pagination !== 'no') { _%>
export interface I<%= entityReactName %>State extends I<%= entityReactName %>BaseState, IPaginationBaseState {
  <%_  if (listButtonsInDropdown === true) { _%> dropdownButtons: {}; <%_ } _%>
};
<%_ } _%>

export class <%= entityReactName %> extends React.Component<I<%= entityReactName %>Props<% if (searchEngine === 'elasticsearch' || pagination !== 'no') { %>, I<%= entityReactName %>State<% } %>> {
  private myFormRef: any;

  constructor(props: I<%= entityReactName %>Props) {
    super(props);
    <%_ if (searchEngine === 'elasticsearch' || pagination !== 'no') { _%>
      this.state = {
        <%_  if (listButtonsInDropdown === true) { _%> dropdownButtons: {}, <%_ } _%>
        <%_ if (searchEngine === 'elasticsearch') { _%>
        search: '',
        <%_ } _%>
        <%_ if (pagination !== 'no') { _%>
        ...getSortState(this.props.location, ITEMS_PER_PAGE),
        ...get<%= entityReactName %>State(this.props.location)
        <%_ } _%>
      };
      <%_ } _%>
  }


  <%_  if (listButtonsInDropdown === true) { _%>
    toggle = (btn) => {
      const dropdownButtons = this.state.dropdownButtons;
      dropdownButtons[btn] = !dropdownButtons[btn];
      this.setState({dropdownButtons})
    }
  <%_ } _%>


  componentDidMount() {
    <%_ if (pagination !== 'no') { _%>
      <%_ if (pagination === 'infinite-scroll') { _%>
      this.reset();
      <%_ } else { _%>
      this.getEntities();
      <%_ } _%>
    <%_ } else { _%>
    this.props.getEntities();
    <%_ } _%>

    <%_ otherEntityActions.forEach(val => { _%>
      this.props.<%= val.action %>();
    <%_ }) _%>
  }


  cancelCourse = () => {
    this.setState(
      {
        <%_ for (idx in fields) { _%>
          <%= fields[idx].fieldName %>: '',
        <%_ } _%>
        <%_ relationships.forEach(rel => { _%>
          <%= rel.relationshipName %>: '',
        <%_ }) _%>
      },
      () => this.sortEntities()
    );
  };
  
  filterEntity = (event, errors, values) => {
    this.setState({
      ...this.state,
      ...values
    }, () => this.sortEntities());
  };
  

  <%_ if (pagination === 'infinite-scroll') { _%>
  componentDidUpdate() {
    if (this.props.updateSuccess) {
      this.reset();
    }
  }
  <%_ } _%>

  <%_ if (searchEngine === 'elasticsearch') { _%>
  search = () => {
    if (this.state.search) {
      <%_ if (pagination === 'infinite-scroll') { _%>
      this.props.reset();
      <%_ } _%>
      <%_ if (pagination !== 'no') { _%>
      this.setState({ activePage: 1 }, () => {
        const { activePage, itemsPerPage, sort, order, search } = this.state;
        this.props.getSearchEntities(search, activePage - 1, itemsPerPage, `${sort},${order}`);
      });
      <%_ } else { _%>
      this.props.getSearchEntities(this.state.search);
      <%_ } _%>
    }
  };

  clear = () => {
    <%_ if (pagination === 'infinite-scroll') { _%>
    this.props.reset();
    <%_ } _%>
    this.setState({ search: ''<% if (pagination !== 'no') { %>, activePage: 1<% } %> }, () => {
      this.props.getEntities()
    });
  };

  handleSearch = event => this.setState({ search: event.target.value });
  <%_ } _%>

  <%_ if (pagination === 'infinite-scroll') { _%>
  reset = () => {
    this.props.reset();
    this.setState({ activePage: 1 }, () => {
      this.getEntities();
    });
  };

  handleLoadMore = () => {
    if (window.pageYOffset > 0) {
      this.setState({ activePage: this.state.activePage + 1 }, () => this.getEntities());
    }
  };
  <%_ } _%>

  <%_ if (pagination !== 'no') { _%>
  sort = prop => () => {
    this.setState(
      {
        order: this.state.order === 'asc' ? 'desc' : 'asc',
        sort: prop
      },
      () => <% if (pagination === 'infinite-scroll') { %>{ this.reset(); }<% } else { %>this.sortEntities()<% } %>
    );
  };

  <%_ if (pagination === 'pagination' || pagination === 'pager') { _%>
    sortEntities() {
      this.getEntities();
      this.props.history.push(this.props.location.pathname +'?' +this.getFiltersURL());
    }
  <%_ } _%>
  
  getFiltersURL = (offset = null) => {
    return 'baseFilters=' + this.state.baseFilters + '&page=' + this.state.activePage + '&' +
    'size=' + this.state.itemsPerPage + '&' +
    (offset !== null ? ('offset=' + offset) + '&' : '') +
    'sort=' + this.state.sort + ',' + this.state.order + '&' +
      <%_ for (idx in fields) { _%>
        '<%= fields[idx].fieldName %>=' + this.state.<%= fields[idx].fieldName %> + '&' +
      <%_ } _%>
      <%_ relationships.forEach(rel => { _%>
        '<%= rel.relationshipName %>=' + this.state.<%= rel.relationshipName %> + '&' +
      <%_ }) _%>
    ''
  };

  <%_ if (pagination === 'pagination' || pagination === 'pager') { _%>
  handlePagination = activePage => this.setState({ activePage }, () => this.sortEntities());
  <%_ } _%>

  getEntities = () => {
    <%_ if (searchEngine === 'elasticsearch') { _%>
    const { activePage, itemsPerPage, sort, order, search } = this.state;
    if (search) {
      this.props.getSearchEntities(search, activePage - 1, itemsPerPage, `${sort},${order}`);
    } else {
      this.props.getEntities(activePage - 1, itemsPerPage, `${sort},${order}`);
    }
    <%_ } else { _%>
    const {<%_ for (idx in fields) { _%><%= fields[idx].fieldName %>, <%_ } _%><%_ relationships.forEach(rel => { _%><%= rel.relationshipName %>, <%_ }) _%>activePage, itemsPerPage, sort, order } = this.state;
    this.props.getEntities(<%_ for (idx in fields) { _%><%= fields[idx].fieldName %>, <%_ } _%><%_ relationships.forEach(rel => { _%><%= rel.relationshipName %>, <%_ }) _%>activePage - 1, itemsPerPage, `${sort},${order}`);
    <%_ } _%>
  };
  <%_ } _%>

  render() {
    const { <% uniqueRealtionFields.forEach(rel => {%> <%= rel %>,<% }) %> <%=entityInstance %>List, match<% if (pagination === 'pagination' || pagination === 'pager') { %>, totalItems<% } %>} = this.props;
    return (
      <div>
          <h2 id="page-heading">
            <span className="page-header"><%= entityClassPluralHumanized %></span>
            <Button id="togglerFilter<%= entityReactName %>" className="btn btn-primary float-right jh-create-entity">
                <Translate contentKey="<%= i18nKeyPrefix %>.home.btn_filter_open">
                  Filters
                </Translate>
                &nbsp;
              <FontAwesomeIcon icon="caret-down" />
            </Button>  &nbsp;
            <%_ if (!readOnly) { _%>
            <Link to={`${match.url}/new?${this.getFiltersURL()}`} className="btn btn-primary float-right jh-create-entity" id="jh-create-entity">
              <FontAwesomeIcon icon="plus" />&nbsp;
              <Translate contentKey="<%= i18nKeyPrefix %>.home.createLabel">
                Create a new <%= entityClassHumanized %>
              </Translate>
            </Link>  &nbsp;
            <%_ } _%>
          </h2>

        <ol className="breadcrumb">
          <li className="breadcrumb-item"><Link to="/">Inicio</Link></li>
          <li className="breadcrumb-item active"><%= entityClassPluralHumanized %></li>
        </ol>
        <Panel>
          <PanelBody>
            <%_ if (searchEngine === 'elasticsearch') { _%>
            <Row>
              <Col sm="12">
                <AvForm onSubmit={this.search}>
                  <div>
                    <InputGroup>
                      <AvInput type="text" name="search" value={this.state.search} onChange={this.handleSearch}
                        placeholder=<% if (enableTranslation) { %>{translate('<%= i18nKeyPrefix %>.home.search')}<% } else { %>"Search"<% } %>/>
                      <Button className="input-group-addon">
                        <FontAwesomeIcon icon="search" />
                      </Button>
                      <Button type="reset" className="input-group-addon" onClick={this.clear}>
                        <FontAwesomeIcon icon="trash" />
                      </Button>
                    </InputGroup>
                  </div>
                </AvForm>
              </Col>
            </Row>
            <%_ } _%>
            <div className="table-responsive">
              <%_ if (pagination === 'infinite-scroll') { _%>
              <InfiniteScroll pageStart={this.state.activePage}
                              loadMore={this.handleLoadMore}
                              hasMore={this.state.activePage - 1 < this.props.links.next}
                              loader={<div className="loader">Loading ...</div>}
                              threshold={0}
                              initialLoad={false}>
              <%_ } _%>
               
                <UncontrolledCollapse toggler="#togglerFilter<%= entityReactName %>">
                  <CardBody>
                    <AvForm ref={(el) => this.myFormRef = el} id="form-filter" onSubmit={this.filterEntity} >
                      <div className="row mt-1 ml-3 mr-3">
                          <%_ if (listFilterLayout.length > 0) {  _%>
                            <%_ for (idx in listFilterLayout) { _%>
                              <%_ if(listFilterLayout[idx].type == 'field'){  _%>
                                <%_ printFieldsFilters(listFilterLayout[idx].entity) _%>
                              <%_ } else {  _%>
                                <%_ printRelationshipsFilters(listFilterLayout[idx].entity) _%>
                              <%_ } _%>
                            <%_ } _%>
                          <%_ } else {  _%>
                            <%_ for (idx in fields) { printFieldsFilters(fields[idx]) } _%>
                            <%_ relationships.forEach(rel => printRelationshipsFilters(rel) ) _%>
                          <%_ } _%>
                      </div>

                      <div className="row mb-2 mr-4 justify-content-end">
                          <Button className="btn btn-success" type="submit">
                            <i className="fa fa-filter" aria-hidden={"true"}></i>
                            &nbsp;
                            <Translate contentKey="<%= i18nKeyPrefix %>.home.btn_filter">Filter</Translate>
                          </Button>
                          &nbsp;
                          <div className="btn btn-secondary hand" onClick={this.cancelCourse}>
                            <FontAwesomeIcon icon="trash-alt" />
                            &nbsp;
                            <Translate contentKey="<%= i18nKeyPrefix %>.home.btn_filter_clean">Clean</Translate>
                          </div>
                        </div>
                
                    </AvForm>
                  </CardBody>
                </UncontrolledCollapse>

              {
                <%= entityInstance %>List && <%= entityInstance %>List.length > 0 ?(
                  <Table responsive aria-describedby="<%= entityFileName %>-heading"  className={'table-hover table-striped mt-4'}>
                    <thead className={"thead-light"}>
                      <tr>
                          
                        <th<% if (pagination !== 'no') { %> className="hand" onClick={this.sort('id')} <%_ } _%>>
                          <Translate contentKey="global.field.id">ID</Translate>
                          <% if (pagination !== 'no') { %> <FontAwesomeIcon icon="sort" /><% } %>
                        </th>
                        <%_ if (listTableLayout.length > 0) {  _%>
                          <%_ for (idx in listTableLayout) { _%>
                            <%_ if(listTableLayout[idx].type == 'field'){  _%>
                              <th<% if (pagination !== 'no') { %> className="hand" onClick={this.sort('<%=listTableLayout[idx].entity.fieldName%>')} <%_ } _%>>
                                <Translate contentKey="<%= `${i18nKeyPrefix}.${listTableLayout[idx].entity.fieldName}` %>">
                                  <%= listTableLayout[idx].fieldNameHumanized %>
                                </Translate>
                                <% if (pagination !== 'no') { %> <FontAwesomeIcon icon="sort" /><% } %>
                              </th>
                            <%_ } else { _%>
                              <th<% if (pagination !== 'no') { %> <% } %>>
                                  <Translate contentKey="<%= `${i18nKeyPrefix}.${listTableLayout[idx].entity.relationshipName}` %>">
                                    <%= listTableLayout[idx].entity.relationshipNameHumanized %></Translate>
                                    <% if (pagination !== 'no') { %> <FontAwesomeIcon icon="sort" /><% } %>
                              </th>
                            <%_ } _%>
                          <%_ } _%>
                        <%_ } else {  _%>
                            <%_ for (idx in fields) { _%>
                              { this.state.baseFilters !== '<%= fields[idx].fieldName %>' ?
                              <th<% if (pagination !== 'no') { %> className="hand" onClick={this.sort('<%=fields[idx].fieldName%>')} <%_ } _%>>
                                <Translate contentKey="<%= `${i18nKeyPrefix}.${fields[idx].fieldName}` %>"><%= fields[idx].fieldNameHumanized %></Translate>
                                <% if (pagination !== 'no') { %> <FontAwesomeIcon icon="sort" /><% } %>
                              </th> : null }
                            <%_ } _%>
                            <%_ for (idx in relationships) { _%>
                                <%_ if (relationships[idx].relationshipType === 'many-to-one'
                                || (relationships[idx].relationshipType === 'one-to-one' && relationships[idx].ownerSide === true)
                                || (relationships[idx].relationshipType === 'many-to-many' && relationships[idx].ownerSide === true && pagination === 'no')) {
                                const fieldName = dto === 'no' ? "." + relationships[idx].otherEntityField : relationships[idx].otherEntityFieldCapitalized;_%>

                                { this.state.baseFilters !== '<%= relationships[idx].relationshipName %>' ?
                                <th<% if (pagination !== 'no') { %> <% } %>>
                                    <Translate contentKey="<%= `${i18nKeyPrefix}.${relationships[idx].relationshipName}` %>">
                                      <%= relationships[idx].relationshipNameHumanized %></Translate>
                                      <% if (pagination !== 'no') { %> <FontAwesomeIcon icon="sort" /><% } %>
                                </th> : null }
                              <%_ } _%>
                            <%_ } _%>
                        <%_ } _%>

                        
                        <th />
                      </tr>
                    </thead>
                    <tbody>
                      <tr></tr>
                      {
                        <%= entityInstance %>List.map((<%=entityInstance %>, i) => (
                        <tr key={`entity-${i}`}>
                          <td>
                            <Button tag={Link} to={`${match.url}/${<%=entityInstance %>.id}`} color="link" size="sm">
                              {<%= entityInstance %>.id}
                            </Button>
                          </td>
                          <%_ if (listTableLayout.length > 0) {  _%>
                            <%_ for (idx in listTableLayout) { _%>
                              <%_ if(listTableLayout[idx].type == 'field'){  _%>
                                <%_ printFieldsTable(listTableLayout[idx].entity) _%>
                              <%_ } else {  _%>
                                <%_  printRelationshipsTable(listTableLayout[idx].entity)  _%>
                              <%_ } _%>
                            <%_ } _%>
                          <%_ } else {  _%>
                            <%_ for (idx in fields) { printFieldsTable(fields[idx]) } _%>
                            <%_ relationships.forEach(rel => printRelationshipsTable(rel) ) _%>
                          <%_ } _%>


                         
                          <td className="text-right">
                            <%_  if (listButtonsInDropdown !== true) { _%>
                              <div className="btn-group flex-btn-group-container">
                              <%_ if (listButtons.length === 0) { _%>
                                  <Button tag={Link} to={`${match.url}/${<%=entityInstance %>.id}?${this.getFiltersURL()}`} color="info" size="sm">
                                    <FontAwesomeIcon icon="eye" /> <span className="d-none d-md-inline" ><Translate contentKey="entity.action.view">View</Translate></span>
                                  </Button>
                                  <%_ if (!readOnly) { _%>
                                    <Button tag={Link} to={`${match.url}/${<%=entityInstance %>.id}/edit?${this.getFiltersURL()}`} color="primary" size="sm">
                                      <FontAwesomeIcon icon="pencil-alt" /> <span className="d-none d-md-inline"><Translate contentKey="entity.action.edit">Edit</Translate></span>
                                    </Button>
                                    <Button tag={Link} to={`${match.url}/${<%=entityInstance %>.id}/delete?${this.getFiltersURL()}`} color="danger" size="sm">
                                      <FontAwesomeIcon icon="trash" /> <span className="d-none d-md-inline"><Translate contentKey="entity.action.delete">Delete</Translate></span>
                                    </Button>
                                  <%_ } _%>
                                <%_ } else { _%>
                                  <%_ for (idx in listButtons) { _%>
                                    <%_ const attrib = listButtons[idx].attributes; _%>
                                    <%_  if (attrib.inDropdown !== 'true') { _%>
                                      <Button tag={<%=attrib['tag'] %>} to={<%- attrib['to'] %>} color="<%=attrib['color'] %>" size="<%=attrib['size'] %>">
                                        <FontAwesomeIcon icon="<%=attrib['icon'] %>" /> <span className="d-none d-md-inline">
                                          <Translate contentKey="<%= i18nKeyPrefix %>.listButtons.<%=listButtons[idx].name %>"><%=attrib['text'] %></Translate>
                                        </span>
                                      </Button>
                                    <%_ } _%>
                                  <%_ } _%>
                                <%_ } _%>
                              </div>
                            <%_ } _%>
                            <%_  if (listButtonsInDropdown === true) { _%>
                              <Dropdown isOpen={this.state.dropdownButtons[i]} toggle={()=>this.toggle(i)}>
                                <DropdownToggle caret> 
                                    <Translate contentKey="<%= i18nKeyPrefix %>.dropdown_btn">Actions</Translate>
                                </DropdownToggle>
                                <DropdownMenu right>
                                  <%_ for (idx in listButtons) { _%>
                                    <%_ const attrib = listButtons[idx].attributes; _%>
                                    <%_  if (attrib.inDropdown === 'true') { _%>
                                      <DropdownItem tag={<%=attrib['tag'] %>} to={<%- attrib['to'] %>} color="<%=attrib['color'] %>" size="<%=attrib['size'] %>" >
                                        <FontAwesomeIcon icon="<%=attrib['icon'] %>" /> <span className="d-none d-md-inline">
                                          <Translate contentKey="<%= i18nKeyPrefix %>.listButtons.<%=listButtons[idx].name %>"><%=attrib['text'] %></Translate></span>
                                      </DropdownItem>
                                    <%_ } _%>
                                  <%_ } _%>
                                </DropdownMenu>
                              </Dropdown>
                            <%_ } _%>
                          </td>
                          </tr>
                        ))
                      }
                    </tbody>
                  </Table>
                ) : (
                  <div className="alert alert-warning">
                    <Translate contentKey="<%= i18nKeyPrefix %>.home.notFound">
                      No <%= entityClassPluralHumanized %> found
                    </Translate>
                  </div>
                )
              }
              <%_ if (pagination === 'infinite-scroll') { _%>
              </InfiniteScroll>
              <%_ } _%>
            </div>
          </PanelBody>
          <PanelFooter>
            <%_ if (databaseType !== 'cassandra') { _%>
              <%_ if (pagination === 'pagination' || pagination === 'pager') { _%>
              <div className={ <%= entityInstance %>List && <%= entityInstance %>List.length > 0 ? '' : 'd-none' }>
                <Row className="justify-content-center">
                  <JhiItemCount
                    page={this.state.activePage}
                    total={totalItems}
                    itemsPerPage={this.state.itemsPerPage}
                    <%{ if (enableTranslation) { %>i18nEnabled<% }}%>
                  />
                </Row>
                <Row className="justify-content-center">
                  <JhiPagination
                    activePage={this.state.activePage}
                    onSelect={this.handlePagination}
                    maxButtons={5}
                    itemsPerPage={this.state.itemsPerPage}
                    totalItems={this.props.totalItems}
                  />
                </Row>
              </div>
              <% } _%>
            <%_ } _%>
          </PanelFooter>
        </Panel>
      </div>
    );
  }
}

const mapStateToProps = ({ <%= entityInstance %>, ...storeState  }: IRootState) => ({
  <%_ otherEntityActions.forEach(val => { _%>
    <%= val.instance %>: storeState.<%= val.reducer %>.<%= val.entity === 'User' ? val.instance : 'entities' %>,
  <%_ }) _%>
  <%= entityInstance %>List: <%= entityInstance %>.entities,
  <%_ if (pagination !== 'no') { _%>
  totalItems: <%= entityInstance %>.totalItems,
  <%_ } _%>
  <%_ if (pagination === 'infinite-scroll') { _%>
  links: <%= entityInstance %>.links,
  entity: <%= entityInstance %>.entity,
  updateSuccess: <%= entityInstance %>.updateSuccess,
  <%_ } _%>
});

const mapDispatchToProps = {
  <%_ otherEntityActions.forEach(val => { _%>
    <%= val.action %>,
  <%_ }) _%>
 <%_ if (searchEngine === 'elasticsearch') { _%>
 getSearchEntities,
 <%_ } _%>
 getEntities,
 <%_ if (pagination === 'infinite-scroll') { _%>
 reset
 <%_ } _%>
};

type StateProps = ReturnType<typeof mapStateToProps>;
type DispatchProps = typeof mapDispatchToProps;

export default connect(mapStateToProps, mapDispatchToProps)(<%= entityReactName %>);
